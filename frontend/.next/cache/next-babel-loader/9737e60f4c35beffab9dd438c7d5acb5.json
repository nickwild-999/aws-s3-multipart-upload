{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nvar Index = /*#__PURE__*/function (_Component) {\n  _inherits(Index, _Component);\n\n  var _super = _createSuper(Index);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      fileSelected: null,\n      uploadId: '',\n      fileName: '',\n      backendUrl: 'http://localhost:4000',\n      uploadPC: 0\n    };\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"fileHandler\",\n    value: function () {\n      var _fileHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var fileSelected, fileName;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                try {\n                  fileSelected = event.target.files[0];\n                  fileName = fileSelected.name;\n                  this.setState({\n                    fileSelected: fileSelected\n                  });\n                  this.setState({\n                    fileName: fileName\n                  });\n                } catch (err) {\n                  console.error(err, err.message);\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fileHandler(_x) {\n        return _fileHandler.apply(this, arguments);\n      }\n\n      return fileHandler;\n    }()\n  }, {\n    key: \"startUpload\",\n    value: function () {\n      var _startUpload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n        var params, resp, uploadId;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                event.preventDefault();\n                params = {\n                  fileName: this.state.fileName,\n                  fileType: this.state.fileSelected.type\n                };\n                _context2.next = 5;\n                return axios.get(\"\".concat(this.state.backendUrl, \"/start-upload\"), {\n                  params: params\n                });\n\n              case 5:\n                resp = _context2.sent;\n                uploadId = resp.data.uploadId;\n                this.setState({\n                  uploadId: uploadId\n                });\n                this.uploadMultipartFile();\n                _context2.next = 14;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 11]]);\n      }));\n\n      function startUpload(_x2) {\n        return _startUpload.apply(this, arguments);\n      }\n\n      return startUpload;\n    }()\n  }, {\n    key: \"uploadMultipartFile\",\n    value: function () {\n      var _uploadMultipartFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var CHUNK_SIZE, fileSize, CHUNKS_COUNT, promisesArray, start, end, blob, index, getUploadUrlResp, presignedUrl, uploadResp, resolvedArray, uploadPartsArray, completeUploadResp;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                console.log('Inside uploadMultipartFile');\n                CHUNK_SIZE = 5000000; // 10MB\n\n                fileSize = this.state.fileSelected.size;\n                CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n                promisesArray = [];\n                index = 1;\n\n              case 7:\n                if (!(index < CHUNKS_COUNT + 1)) {\n                  _context3.next = 22;\n                  break;\n                }\n\n                start = (index - 1) * CHUNK_SIZE;\n                end = index * CHUNK_SIZE;\n                blob = index < CHUNKS_COUNT ? this.state.fileSelected.slice(start, end) : this.state.fileSelected.slice(start); // Get presigned URL for each part\n\n                _context3.next = 13;\n                return axios.get(\"\".concat(this.state.backendUrl, \"/get-upload-url\"), {\n                  params: {\n                    fileName: this.state.fileName,\n                    partNumber: index,\n                    uploadId: this.state.uploadId\n                  }\n                });\n\n              case 13:\n                getUploadUrlResp = _context3.sent;\n                presignedUrl = getUploadUrlResp.data.presignedUrl;\n                console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + this.state.fileSelected.type); // Send part aws server\n\n                uploadResp = axios.put(presignedUrl, blob, {\n                  headers: {\n                    'Content-Type': this.state.fileSelected.type\n                  }\n                });\n                promisesArray.push(uploadResp);\n                uploadPC = uploadPC + 1;\n\n              case 19:\n                index++;\n                _context3.next = 7;\n                break;\n\n              case 22:\n                _context3.next = 24;\n                return Promise.all(promisesArray);\n\n              case 24:\n                resolvedArray = _context3.sent;\n                console.log(resolvedArray, ' resolvedAr');\n                uploadPartsArray = [];\n                resolvedArray.forEach(function (resolvedPromise, index) {\n                  uploadPartsArray.push({\n                    ETag: resolvedPromise.headers.etag,\n                    PartNumber: index + 1\n                  });\n                }); // CompleteMultipartUpload in the backend server\n\n                _context3.next = 30;\n                return axios.post(\"\".concat(this.state.backendUrl, \"/complete-upload\"), {\n                  params: {\n                    fileName: this.state.fileName,\n                    parts: uploadPartsArray,\n                    uploadId: this.state.uploadId\n                  }\n                });\n\n              case 30:\n                completeUploadResp = _context3.sent;\n                console.log(completeUploadResp.data, \"complete upload response\");\n                _context3.next = 37;\n                break;\n\n              case 34:\n                _context3.prev = 34;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.log(_context3.t0);\n\n              case 37:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 34]]);\n      }));\n\n      function uploadMultipartFile() {\n        return _uploadMultipartFile.apply(this, arguments);\n      }\n\n      return uploadMultipartFile;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }\n      }, __jsx(\"form\", {\n        onSubmit: this.startUpload.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }\n      }, \"Upload Dataset:\"), __jsx(\"input\", {\n        type: \"file\",\n        id: \"file\",\n        onChange: this.fileHandler.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }\n      }), __jsx(\"button\", {\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }\n      }, \"Upload\"))));\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nexport { Index as default };","map":{"version":3,"sources":["/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index.js"],"names":["React","Component","axios","Index","props","state","fileSelected","uploadId","fileName","backendUrl","uploadPC","event","target","files","name","setState","err","console","error","message","preventDefault","params","fileType","type","get","resp","data","uploadMultipartFile","log","CHUNK_SIZE","fileSize","size","CHUNKS_COUNT","Math","floor","promisesArray","index","start","end","blob","slice","partNumber","getUploadUrlResp","presignedUrl","uploadResp","put","headers","push","Promise","all","resolvedArray","uploadPartsArray","forEach","resolvedPromise","ETag","etag","PartNumber","post","parts","completeUploadResp","startUpload","bind","fileHandler"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEqBC,K;;;;;AACnB,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE,IADH;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXC,MAAAA,QAAQ,EAAE,EAHC;AAIXC,MAAAA,UAAU,EAAE,uBAJD;AAKXC,MAAAA,QAAQ,EAAC;AALE,KAAb;AAFiB;AASlB;;;;;mGAEiBC,K;;;;;;AAChB,oBAAI;AACEL,kBAAAA,YADF,GACiBK,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CADjB;AAEEL,kBAAAA,QAFF,GAEaF,YAAY,CAACQ,IAF1B;AAGF,uBAAKC,QAAL,CAAc;AAAET,oBAAAA,YAAY,EAAZA;AAAF,mBAAd;AACA,uBAAKS,QAAL,CAAc;AAAEP,oBAAAA,QAAQ,EAARA;AAAF,mBAAd;AACD,iBALD,CAKE,OAAOQ,GAAP,EAAY;AACZC,kBAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd,EAAmBA,GAAG,CAACG,OAAvB;AACD;;;;;;;;;;;;;;;;;;;oGAGeR,K;;;;;;;AAEdA,gBAAAA,KAAK,CAACS,cAAN;AACMC,gBAAAA,M,GAAS;AACbb,kBAAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QADR;AAEbc,kBAAAA,QAAQ,EAAE,KAAKjB,KAAL,CAAWC,YAAX,CAAwBiB;AAFrB,iB;;uBAKErB,KAAK,CAACsB,GAAN,WAAa,KAAKnB,KAAL,CAAWI,UAAxB,oBAAmD;AAAEY,kBAAAA,MAAM,EAANA;AAAF,iBAAnD,C;;;AAAbI,gBAAAA,I;AACElB,gBAAAA,Q,GAAakB,IAAI,CAACC,I,CAAlBnB,Q;AACN,qBAAKQ,QAAL,CAAc;AAAER,kBAAAA,QAAQ,EAARA;AAAF,iBAAd;AACA,qBAAKoB,mBAAL;;;;;;;AAGAV,gBAAAA,OAAO,CAACW,GAAR;;;;;;;;;;;;;;;;;;;;;;;;;;AAMAX,gBAAAA,OAAO,CAACW,GAAR,CAAY,4BAAZ;AACMC,gBAAAA,U,GAAa,O,EAAQ;;AACrBC,gBAAAA,Q,GAAW,KAAKzB,KAAL,CAAWC,YAAX,CAAwByB,I;AACnCC,gBAAAA,Y,GAAeC,IAAI,CAACC,KAAL,CAAWJ,QAAQ,GAAGD,UAAtB,IAAoC,C;AACrDM,gBAAAA,a,GAAgB,E;AAGXC,gBAAAA,K,GAAQ,C;;;sBAAGA,KAAK,GAAGJ,YAAY,GAAG,C;;;;;AACzCK,gBAAAA,KAAK,GAAG,CAACD,KAAK,GAAG,CAAT,IAAcP,UAAtB;AACAS,gBAAAA,GAAG,GAAIF,KAAD,GAAUP,UAAhB;AACAU,gBAAAA,IAAI,GAAIH,KAAK,GAAGJ,YAAT,GAAyB,KAAK3B,KAAL,CAAWC,YAAX,CAAwBkC,KAAxB,CAA8BH,KAA9B,EAAqCC,GAArC,CAAzB,GAAqE,KAAKjC,KAAL,CAAWC,YAAX,CAAwBkC,KAAxB,CAA8BH,KAA9B,CAA5E,C,CAEA;;;uBAC6BnC,KAAK,CAACsB,GAAN,WAAa,KAAKnB,KAAL,CAAWI,UAAxB,sBAAqD;AAChFY,kBAAAA,MAAM,EAAE;AACNb,oBAAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QADf;AAENiC,oBAAAA,UAAU,EAAEL,KAFN;AAGN7B,oBAAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWE;AAHf;AADwE,iBAArD,C;;;AAAzBmC,gBAAAA,gB;AAQEC,gBAAAA,Y,GAAiBD,gBAAgB,CAAChB,I,CAAlCiB,Y;AACN1B,gBAAAA,OAAO,CAACW,GAAR,CAAY,sBAAsBQ,KAAtB,GAA8B,IAA9B,GAAqCO,YAArC,GAAoD,YAApD,GAAmE,KAAKtC,KAAL,CAAWC,YAAX,CAAwBiB,IAAvG,E,CAEA;;AACIqB,gBAAAA,U,GAAa1C,KAAK,CAAC2C,GAAN,CAAUF,YAAV,EAAwBJ,IAAxB,EAA8B;AAC7CO,kBAAAA,OAAO,EAAE;AACP,oCAAgB,KAAKzC,KAAL,CAAWC,YAAX,CAAwBiB;AADjC;AADoC,iBAA9B,C;AAKjBY,gBAAAA,aAAa,CAACY,IAAd,CAAmBH,UAAnB;AACAlC,gBAAAA,QAAQ,GAACA,QAAQ,GAAC,CAAlB;;;AAxB4C0B,gBAAAA,KAAK,E;;;;;;uBA2BzBY,OAAO,CAACC,GAAR,CAAYd,aAAZ,C;;;AAAtBe,gBAAAA,a;AACJjC,gBAAAA,OAAO,CAACW,GAAR,CAAYsB,aAAZ,EAA2B,aAA3B;AAEIC,gBAAAA,gB,GAAmB,E;AACvBD,gBAAAA,aAAa,CAACE,OAAd,CAAsB,UAACC,eAAD,EAAkBjB,KAAlB,EAA4B;AAChDe,kBAAAA,gBAAgB,CAACJ,IAAjB,CAAsB;AACpBO,oBAAAA,IAAI,EAAED,eAAe,CAACP,OAAhB,CAAwBS,IADV;AAEpBC,oBAAAA,UAAU,EAAEpB,KAAK,GAAG;AAFA,mBAAtB;AAID,iBALD,E,CAOA;;;uBAC+BlC,KAAK,CAACuD,IAAN,WAAc,KAAKpD,KAAL,CAAWI,UAAzB,uBAAuD;AACpFY,kBAAAA,MAAM,EAAE;AACNb,oBAAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QADf;AAENkD,oBAAAA,KAAK,EAAEP,gBAFD;AAGN5C,oBAAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWE;AAHf;AAD4E,iBAAvD,C;;;AAA3BoD,gBAAAA,kB;AAQJ1C,gBAAAA,OAAO,CAACW,GAAR,CAAY+B,kBAAkB,CAACjC,IAA/B,EAAqC,0BAArC;;;;;;;AAGAT,gBAAAA,OAAO,CAACW,GAAR;;;;;;;;;;;;;;;;;;6BAIK;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,QAAQ,EAAE,KAAKgC,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,MAAtB;AAA6B,QAAA,QAAQ,EAAE,KAAKC,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,CADF,CADF,CADF;AAaD;;;;EAtHgC5D,S;;SAAdE,K","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\n\nexport default class Index extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      fileSelected: null,\n      uploadId: '',\n      fileName: '',\n      backendUrl: 'http://localhost:4000',\n      uploadPC:0\n    }\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0]\n      let fileName = fileSelected.name\n      this.setState({ fileSelected })\n      this.setState({ fileName })\n    } catch (err) {\n      console.error(err, err.message) \n    }\n  }\n\n  async startUpload(event) {\n    try {\n      event.preventDefault()\n      const params = {\n        fileName: this.state.fileName,\n        fileType: this.state.fileSelected.type\n      };\n\n      let resp = await axios.get(`${this.state.backendUrl}/start-upload`, { params })\n      let { uploadId } = resp.data\n      this.setState({ uploadId })\n      this.uploadMultipartFile()\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      console.log('Inside uploadMultipartFile')\n      const CHUNK_SIZE = 5000000 // 10MB\n      const fileSize = this.state.fileSelected.size\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1\n      let promisesArray = []\n      let start, end, blob\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE\n        end = (index) * CHUNK_SIZE\n        blob = (index < CHUNKS_COUNT) ? this.state.fileSelected.slice(start, end) : this.state.fileSelected.slice(start)\n\n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(`${this.state.backendUrl}/get-upload-url`, {\n          params: {\n            fileName: this.state.fileName,\n            partNumber: index,\n            uploadId: this.state.uploadId\n          }\n        })\n\n        let { presignedUrl } = getUploadUrlResp.data\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + this.state.fileSelected.type)\n\n        // Send part aws server\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            'Content-Type': this.state.fileSelected.type\n          }\n        });\n        promisesArray.push(uploadResp)\n        uploadPC=uploadPC+1\n      }\n\n      let resolvedArray = await Promise.all(promisesArray)\n      console.log(resolvedArray, ' resolvedAr')\n\n      let uploadPartsArray = []\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        })\n      })\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(`${this.state.backendUrl}/complete-upload`, {\n        params: {\n          fileName: this.state.fileName,\n          parts: uploadPartsArray,\n          uploadId: this.state.uploadId\n        }\n      })\n\n      console.log(completeUploadResp.data, \"complete upload response\")\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.startUpload.bind(this)}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input type='file' id='file' onChange={this.fileHandler.bind(this)} />\n            <button type='submit'>\n              Upload\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}