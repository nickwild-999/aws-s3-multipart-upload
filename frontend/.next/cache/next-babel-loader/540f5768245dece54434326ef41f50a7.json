{"ast":null,"code":"var _jsxFileName = \"/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/indexold.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport axios from 'axios';\nexport default class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileSelected: null,\n      uploadId: '',\n      fileName: '',\n      backendUrl: 'http://localhost:4000',\n      uploadPC: 0,\n      progressArray: [],\n      uploadProgress: 0\n    };\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0];\n      let fileName = fileSelected.name;\n      this.setState({\n        fileSelected\n      });\n      this.setState({\n        fileName\n      });\n    } catch (err) {\n      console.error(err, err.message);\n    }\n  }\n\n  async startUpload(event) {\n    try {\n      event.preventDefault();\n      const params = {\n        fileName: this.state.fileName,\n        fileType: this.state.fileSelected.type\n      };\n      console.log(\"fs\", this.state.fileSelected);\n      console.log(\"params:\", params);\n      let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {\n        params\n      });\n      let {\n        uploadId\n      } = resp.data;\n      this.setState({\n        uploadId\n      });\n      this.uploadMultipartFile();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      // console.log('Inside uploadMultipartFile')\n      const fileSize = this.state.fileSelected.size;\n      const CHUNK_SIZE = 5000000; // 5MB\n\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1; // const CHUNKS_COUNT =20\n      // const CHUNK_SIZE = fileSize/CHUNKS_COUNT // 5MB\n\n      let promisesArray = [];\n      let start, end, blob;\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE;\n        end = index * CHUNK_SIZE;\n        blob = index < CHUNKS_COUNT ? this.state.fileSelected.slice(start, end) : this.state.fileSelected.slice(start); // Get presigned URL for each part\n\n        let getUploadUrlResp = await axios.get(`${this.state.backendUrl}/get-upload-url`, {\n          params: {\n            fileName: this.state.fileName,\n            partNumber: index,\n            uploadId: this.state.uploadId\n          }\n        }); //new\n\n        async function uploadProgressHandler(progressEvent, blob, index) {\n          if (progressEvent.loaded >= progressEvent.total) return;\n          const currentProgress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          this.setState(progressArray => {\n            progressArray[0] = \"test\";\n          }); // this.setState(progressArray =>{progressArray[index] = currentProgress});\n          // const sum = progressArray.reduce((acc, curr) => acc + curr);\n          // this.state.uploadProgress(Math.round(sum / numberOfParts));\n\n          console.log(progressArray);\n        }\n\n        let {\n          presignedUrl\n        } = getUploadUrlResp.data;\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + this.state.fileSelected.type); // Send part aws server\n\n        let uploadResp = axios.put(presignedUrl, blob, {\n          //new\n          onUploadProgress: e => uploadProgressHandler(e, CHUNKS_COUNT, index),\n          headers: {\n            'Content-Type': this.state.fileSelected.type\n          }\n        }).then(resp => {\n          this.setState({\n            uploadPC: this.state.uploadPC + 1\n          });\n          console.log(parseInt(this.state.uploadPC * CHUNK_SIZE / fileSize * 100) + \"% uploaded\");\n          return resp;\n        });\n        promisesArray.push(uploadResp);\n      }\n\n      let resolvedArray = await Promise.all(promisesArray);\n      console.log(resolvedArray, ' resolvedAr');\n      let uploadPartsArray = [];\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        });\n      }); // CompleteMultipartUpload in the backend server\n\n      let completeUploadResp = await axios.post(`${this.state.backendUrl}/complete-upload`, {\n        params: {\n          fileName: this.state.fileName,\n          parts: uploadPartsArray,\n          uploadId: this.state.uploadId\n        }\n      });\n      console.log(completeUploadResp.data, \"complete upload response\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }\n    }, __jsx(\"form\", {\n      onSubmit: this.startUpload.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, \"Upload Dataset:\"), __jsx(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      onChange: this.fileHandler.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, \"Upload\"))));\n  }\n\n}","map":{"version":3,"sources":["/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/indexold.js"],"names":["React","Component","axios","Index","constructor","props","state","fileSelected","uploadId","fileName","backendUrl","uploadPC","progressArray","uploadProgress","fileHandler","event","target","files","name","setState","err","console","error","message","startUpload","preventDefault","params","fileType","type","log","resp","get","data","uploadMultipartFile","fileSize","size","CHUNK_SIZE","CHUNKS_COUNT","Math","floor","promisesArray","start","end","blob","index","slice","getUploadUrlResp","partNumber","uploadProgressHandler","progressEvent","loaded","total","currentProgress","round","presignedUrl","uploadResp","put","onUploadProgress","e","headers","then","parseInt","push","resolvedArray","Promise","all","uploadPartsArray","forEach","resolvedPromise","ETag","etag","PartNumber","completeUploadResp","post","parts","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\n\nexport default class Index extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      fileSelected: null,\n      uploadId: '',\n      fileName: '',\n      backendUrl: 'http://localhost:4000',\n      uploadPC:0,\n      progressArray:[],\n      uploadProgress:0\n    }\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0]\n      let fileName = fileSelected.name\n      this.setState({ fileSelected })\n      this.setState({ fileName })\n    } catch (err) {\n      console.error(err, err.message) \n    }\n  }\n  \n  async startUpload(event) {\n    try {\n      event.preventDefault()\n      const params = {\n        fileName: this.state.fileName,\n        fileType: this.state.fileSelected.type\n      };\n      console.log(\"fs\", this.state.fileSelected)\n      console.log(\"params:\",params)\n\n      let resp = await axios.get(`${this.state.backendUrl}/start-upload`, { params })\n      let { uploadId } = resp.data\n      this.setState({ uploadId })\n      this.uploadMultipartFile()\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      // console.log('Inside uploadMultipartFile')\n      const fileSize = this.state.fileSelected.size\n      const CHUNK_SIZE = 5000000 // 5MB\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1\n      // const CHUNKS_COUNT =20\n      // const CHUNK_SIZE = fileSize/CHUNKS_COUNT // 5MB\n      \n      \n     \n      let promisesArray = []\n      let start, end, blob\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE\n        end = (index) * CHUNK_SIZE\n        blob = (index < CHUNKS_COUNT) ? this.state.fileSelected.slice(start, end) : this.state.fileSelected.slice(start)\n\n \n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(`${this.state.backendUrl}/get-upload-url`, {\n          params: {\n            fileName: this.state.fileName,\n            partNumber: index,\n            uploadId: this.state.uploadId\n          }\n        })\n\n//new\nasync function uploadProgressHandler(progressEvent, blob, index) {\n  if (progressEvent.loaded >= progressEvent.total) return;\n  const currentProgress = Math.round((progressEvent.loaded * 100) / progressEvent.total);  \n  this.setState(progressArray=>{progressArray[0]=\"test\"})\n  // this.setState(progressArray =>{progressArray[index] = currentProgress});\n    // const sum = progressArray.reduce((acc, curr) => acc + curr);\n    // this.state.uploadProgress(Math.round(sum / numberOfParts));\n  console.log(progressArray)\n}\n\n      \n      \n\n\n        let { presignedUrl } = getUploadUrlResp.data\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + this.state.fileSelected.type)\n\n        // Send part aws server\n        let uploadResp = axios.put(presignedUrl, blob, {\n          //new\n          onUploadProgress: (e) => uploadProgressHandler(e, CHUNKS_COUNT, index),\n          headers: {\n            'Content-Type': this.state.fileSelected.type\n          }\n        }).then(resp => {\n          this.setState({ \n            uploadPC:this.state.uploadPC+1  \n          })\n          console.log(parseInt(((this.state.uploadPC*CHUNK_SIZE)/fileSize)*100) + \"% uploaded\" )\n\n          return resp\n        })\n        \n        promisesArray.push(uploadResp)\n        \n      }\n\n      let resolvedArray = await Promise.all(promisesArray)\n      console.log(resolvedArray, ' resolvedAr')\n\n      let uploadPartsArray = []\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        })\n\n      })\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(`${this.state.backendUrl}/complete-upload`, {\n        params: {\n          fileName: this.state.fileName,\n          parts: uploadPartsArray,\n          uploadId: this.state.uploadId\n        }\n      })\n   \n      console.log(completeUploadResp.data, \"complete upload response\")\n\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.startUpload.bind(this)}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input type='file' id='file' onChange={this.fileHandler.bind(this)} />\n            <button type='submit'>\n              Upload\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}