{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index-as-function.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { Component, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nvar Index = function Index() {\n  _s();\n\n  var _useState = useState(null),\n      fileSelected = _useState[0],\n      setfileSelected = _useState[1];\n\n  var _useState2 = useState(''),\n      uploadId = _useState2[0],\n      setuploadId = _useState2[1];\n\n  var _useState3 = useState(''),\n      Fred = _useState3[0],\n      setFred = _useState3[1];\n\n  var _useState4 = useState(''),\n      fileName = _useState4[0],\n      setfileName = _useState4[1];\n\n  var _useState5 = useState(''),\n      fileType = _useState5[0],\n      setfileType = _useState5[1]; // const [uploadPC, setuploadPC]=useState()\n\n\n  var _useState6 = useState('http://localhost:4000'),\n      backendUrl = _useState6[0],\n      setbackendUrl = _useState6[1];\n\n  var _useState7 = useState([]),\n      progressArray = _useState7[0],\n      setprogressArray = _useState7[1];\n\n  var _useState8 = useState(0),\n      uploadProgress = _useState8[0],\n      setuploadProgress = _useState8[1];\n\n  useEffect(function () {\n    if (Fred) uploadMultipartFile();\n  }, [Fred]);\n\n  var fileHandler = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _fileSelected, _fileName, _fileType;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              try {\n                _fileSelected = document.getElementById('myfile').files[0];\n                _fileName = _fileSelected.name;\n                _fileType = _fileSelected.type;\n                setfileSelected(_fileSelected);\n                setfileName(_fileName);\n                setfileType(_fileType); // console.log(fileSelected)\n              } catch (err) {\n                console.error(err, err.message);\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fileHandler(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var startUpload = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      var params, resp, _uploadId;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              e.preventDefault();\n              params = {\n                fileName: fileName,\n                fileType: fileSelected.type\n              };\n              _context2.next = 5;\n              return axios.get(\"\".concat(backendUrl, \"/start-upload\"), {\n                params: params\n              });\n\n            case 5:\n              resp = _context2.sent;\n              _uploadId = resp.data.uploadId;\n              setFred(_uploadId);\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(\"startupload \", _context2.t0);\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 10]]);\n    }));\n\n    return function startUpload(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var uploadMultipartFile = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              return _context6.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                var fileSize, CHUNK_SIZE, CHUNKS_COUNT, promisesArray, start, end, blob, _loop, index, resolvedArray, uploadPartsArray, completeUploadResp;\n\n                return _regeneratorRuntime.wrap(function _callee4$(_context5) {\n                  while (1) {\n                    switch (_context5.prev = _context5.next) {\n                      case 0:\n                        console.log(\"I am Fred:\", Fred);\n                        fileSize = fileSelected.size;\n                        CHUNK_SIZE = 10000000; // 10MB\n\n                        CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n                        promisesArray = [];\n                        _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(index) {\n                          var getUploadUrlResp, uploadProgressHandler, presignedUrl, uploadResp;\n                          return _regeneratorRuntime.wrap(function _loop$(_context4) {\n                            while (1) {\n                              switch (_context4.prev = _context4.next) {\n                                case 0:\n                                  start = (index - 1) * CHUNK_SIZE;\n                                  end = index * CHUNK_SIZE;\n                                  blob = index < CHUNKS_COUNT ? fileSelected.slice(start, end) : fileSelected.slice(start); // Get presigned URL for each part\n\n                                  _context4.next = 5;\n                                  return axios.get(\"\".concat(backendUrl, \"/get-upload-url\"), {\n                                    params: {\n                                      fileName: fileName,\n                                      partNumber: index,\n                                      uploadId: Fred\n                                    }\n                                  });\n\n                                case 5:\n                                  getUploadUrlResp = _context4.sent;\n\n                                  uploadProgressHandler = /*#__PURE__*/function () {\n                                    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(progressEvent, blob, index) {\n                                      var currentProgress;\n                                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                                        while (1) {\n                                          switch (_context3.prev = _context3.next) {\n                                            case 0:\n                                              if (!(progressEvent.loaded >= progressEvent.total)) {\n                                                _context3.next = 2;\n                                                break;\n                                              }\n\n                                              return _context3.abrupt(\"return\");\n\n                                            case 2:\n                                              currentProgress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n                                              setProgressArray(function (progressArray) {\n                                                progressArray[index - 1] = currentProgress;\n                                                var sum = progressArray.reduce(function (acc, curr) {\n                                                  return acc + curr;\n                                                });\n                                                setUploadProgress(Math.round(sum / CHUNKS_COUNT));\n                                                return progressArray;\n                                              });\n                                              console.log(progressArray);\n                                              console.log(uploadProgress);\n\n                                            case 6:\n                                            case \"end\":\n                                              return _context3.stop();\n                                          }\n                                        }\n                                      }, _callee3);\n                                    }));\n\n                                    return function uploadProgressHandler(_x3, _x4, _x5) {\n                                      return _ref4.apply(this, arguments);\n                                    };\n                                  }();\n\n                                  presignedUrl = getUploadUrlResp.data.presignedUrl;\n                                  console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + fileSelected.type); // Send part aws server\n\n                                  uploadResp = axios.put(presignedUrl, blob, {\n                                    onUploadProgress: function onUploadProgress(e) {\n                                      return uploadProgressHandler(e, CHUNKS_COUNT, index);\n                                    },\n                                    headers: {\n                                      'Content-Type': fileSelected.type\n                                    }\n                                  });\n                                  promisesArray.push(uploadResp);\n\n                                case 11:\n                                case \"end\":\n                                  return _context4.stop();\n                              }\n                            }\n                          }, _loop);\n                        });\n                        index = 1;\n\n                      case 7:\n                        if (!(index < CHUNKS_COUNT + 1)) {\n                          _context5.next = 12;\n                          break;\n                        }\n\n                        return _context5.delegateYield(_loop(index), \"t0\", 9);\n\n                      case 9:\n                        index++;\n                        _context5.next = 7;\n                        break;\n\n                      case 12:\n                        _context5.next = 14;\n                        return Promise.all(promisesArray);\n\n                      case 14:\n                        resolvedArray = _context5.sent;\n                        console.log(resolvedArray, ' resolvedArray');\n                        uploadPartsArray = [];\n                        resolvedArray.forEach(function (resolvedPromise, index) {\n                          uploadPartsArray.push({\n                            ETag: resolvedPromise.headers.etag,\n                            PartNumber: index + 1\n                          });\n                        });\n                        console.log({\n                          uploadPartsArray: uploadPartsArray\n                        });\n                        console.log(\"I am Fred:\", Fred);\n                        console.log({\n                          fileName: fileName\n                        }); // CompleteMultipartUpload in the backend server\n\n                        _context5.next = 23;\n                        return axios.post(\"\".concat(backendUrl, \"/complete-upload\"), {\n                          params: {\n                            fileName: fileName,\n                            parts: uploadPartsArray,\n                            uploadId: Fred\n                          }\n                        });\n\n                      case 23:\n                        completeUploadResp = _context5.sent;\n                        console.log(completeUploadResp.data, \"complete upload response\");\n\n                      case 25:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }\n                }, _callee4);\n              })(), \"t0\", 2);\n\n            case 2:\n              _context6.next = 7;\n              break;\n\n            case 4:\n              _context6.prev = 4;\n              _context6.t1 = _context6[\"catch\"](0);\n              console.log(_context6.t1);\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee5, null, [[0, 4]]);\n    }));\n\n    return function uploadMultipartFile() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, __jsx(\"form\", {\n    onSubmit: startUpload,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, \"Upload Dataset:\"), __jsx(\"input\", {\n    type: \"file\",\n    id: \"myfile\",\n    onChange: fileHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, \"Upload\"), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, uploadProgress, \"% uploaded\"))));\n};\n\n_s(Index, \"cwsfzGmVF9iSzjE+q6zIlTMXLpA=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index-as-function.js"],"names":["React","Component","useState","useEffect","axios","Index","fileSelected","setfileSelected","uploadId","setuploadId","Fred","setFred","fileName","setfileName","fileType","setfileType","backendUrl","setbackendUrl","progressArray","setprogressArray","uploadProgress","setuploadProgress","uploadMultipartFile","fileHandler","e","document","getElementById","files","name","type","err","console","error","message","startUpload","preventDefault","params","get","resp","data","log","fileSize","size","CHUNK_SIZE","CHUNKS_COUNT","Math","floor","promisesArray","index","start","end","blob","slice","partNumber","getUploadUrlResp","uploadProgressHandler","progressEvent","loaded","total","currentProgress","round","setProgressArray","sum","reduce","acc","curr","setUploadProgress","presignedUrl","uploadResp","put","onUploadProgress","headers","push","Promise","all","resolvedArray","uploadPartsArray","forEach","resolvedPromise","ETag","etag","PartNumber","post","parts","completeUploadResp"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst Index=() => {\n const [fileSelected, setfileSelected]=useState(null)\n  const [uploadId, setuploadId]=useState('')\n  const [Fred, setFred]=useState('')\n  const [fileName, setfileName]=useState('')\n  const [fileType, setfileType]=useState('')\n  // const [uploadPC, setuploadPC]=useState()\n  const [backendUrl, setbackendUrl]=useState('http://localhost:4000')\n  const [progressArray, setprogressArray]=useState([])\n  const [uploadProgress, setuploadProgress]=useState(0)\n\n  useEffect(() => {\n    if (Fred) \n    uploadMultipartFile()\n  }, [Fred]);\n  \n  const fileHandler=async(e) =>{\n    try {\n      let fileSelected = document.getElementById('myfile').files[0]\n      let fileName = fileSelected.name\n      let fileType = fileSelected.type\n      setfileSelected(fileSelected)\n      setfileName(fileName)\n      setfileType(fileType)\n      // console.log(fileSelected)\n    } catch (err) {\n      console.error(err, err.message) \n    }\n  }\n\n   const startUpload=async(e) =>{\n    try {\n      e.preventDefault()\n      \n      const params = {\n        fileName: fileName,\n        fileType: fileSelected.type\n      };\n      \n      let resp = await axios.get(`${backendUrl}/start-upload`, { params })\n      const { uploadId } = resp.data\n      setFred(uploadId)\n    } catch (err) {\n      console.log(\"startupload \",err)\n    }\n  }\n\n   const uploadMultipartFile=async() =>{    \n    try {\n      console.log(\"I am Fred:\",Fred)\n      const fileSize = fileSelected.size\n      const CHUNK_SIZE = 10000000 // 10MB\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1\n      let promisesArray = []\n      let start, end, blob\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE\n        end = (index) * CHUNK_SIZE\n        blob = (index < CHUNKS_COUNT) ? fileSelected.slice(start, end) : fileSelected.slice(start)\n\n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(`${backendUrl}/get-upload-url`, {\n          params: {\n            fileName: fileName,\n            partNumber: index,\n            uploadId: Fred,\n          }\n        })\n\n\n\n\n        const uploadProgressHandler=async(progressEvent, blob, index)=> {\n          if (progressEvent.loaded >= progressEvent.total) return;\n  \n          const currentProgress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n          setProgressArray((progressArray) => {\n              progressArray[index-1] = currentProgress;\n              const sum = progressArray.reduce((acc, curr) => acc + curr);\n              setUploadProgress(Math.round(sum / CHUNKS_COUNT));\n              \n              return progressArray;\n          });\n          console.log(progressArray)\n        console.log(uploadProgress)\n      }\n\n\n\n        let { presignedUrl } = getUploadUrlResp.data\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + fileSelected.type)\n\n        // Send part aws server\n        let uploadResp = axios.put(presignedUrl, blob, {\n          onUploadProgress: (e) => uploadProgressHandler(e, CHUNKS_COUNT, index),\n          headers: {\n            'Content-Type': fileSelected.type\n          }\n        })\n        promisesArray.push(uploadResp)\n      }\n\n\n      let resolvedArray = await Promise.all(promisesArray)\n      console.log(resolvedArray, ' resolvedArray')\n\n      let uploadPartsArray = []\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        })\n\n      })\n\n      console.log({uploadPartsArray})\n      console.log(\"I am Fred:\", Fred)\n      console.log({fileName})\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(`${backendUrl}/complete-upload`, {\n        params: {\n          fileName: fileName,\n          parts: uploadPartsArray,\n          uploadId: Fred\n        }\n      })\n      console.log(completeUploadResp.data, \"complete upload response\")\n\n    } catch (err) {\n      console.log(err)\n    }\n  };\n\n    return (\n      <div>\n        <form onSubmit={startUpload}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input type='file' id='myfile' onChange={fileHandler} />\n            <button type='submit'>\n              Upload\n            </button>\n            <div>{uploadProgress}% uploaded</div>\n\n          </div>\n        </form>\n      </div>\n    )\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}