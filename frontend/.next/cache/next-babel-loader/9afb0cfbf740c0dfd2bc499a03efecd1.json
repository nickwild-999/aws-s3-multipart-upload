{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index.js\";\n\nvar __jsx = React.createElement;\nimport React, { Component, setState } from 'react';\nimport axios from 'axios';\nexport default (function (Index) {\n  var _setState = setState(null),\n      _setState2 = _slicedToArray(_setState, 2),\n      fileSelected = _setState2[0],\n      setfileSelected = _setState2[1];\n\n  var _setState3 = setState(''),\n      _setState4 = _slicedToArray(_setState3, 2),\n      uploadId = _setState4[0],\n      setuploadId = _setState4[1];\n\n  var _setState5 = setState(''),\n      _setState6 = _slicedToArray(_setState5, 2),\n      fileName = _setState6[0],\n      setfileName = _setState6[1];\n\n  var _setState7 = setState(),\n      _setState8 = _slicedToArray(_setState7, 2),\n      uploadPC = _setState8[0],\n      setuploadPC = _setState8[1];\n\n  var _setState9 = setState('http://localhost:4000'),\n      _setState10 = _slicedToArray(_setState9, 2),\n      backendUrl = _setState10[0],\n      setbackendUrl = _setState10[1]; // constructor(props) {\n  //   super(props)\n  //   this.state = {\n  //     fileSelected: null,\n  //     uploadId: '',\n  //     fileName: '',\n  //     backendUrl: 'http://localhost:4000',\n  //     uploadPC:0,\n  //   }\n  // }\n\n\n  fileHandler = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var _fileSelected, _fileName;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              try {\n                _fileSelected = event.target.files[0];\n                _fileName = _fileSelected.name;\n                setfileSelected({\n                  fileSelected: _fileSelected\n                });\n                setfileName({\n                  fileName: _fileName\n                });\n              } catch (err) {\n                console.error(err, err.message);\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fileHandler(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  startUpload = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n      var params, resp, _uploadId;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              event.preventDefault();\n              params = {\n                fileName: fileName,\n                fileType: fileSelected.type\n              };\n              _context2.next = 5;\n              return axios.get(\"\".concat(backendUrl, \"/start-upload\"), {\n                params: params\n              });\n\n            case 5:\n              resp = _context2.sent;\n              _uploadId = resp.data.uploadId;\n              setuploadId({\n                uploadId: _uploadId\n              });\n              uploadMultipartFile();\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 11]]);\n    }));\n\n    return function startUpload(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  uploadMultipartFile = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              return _context4.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                var fileSize, CHUNK_SIZE, CHUNKS_COUNT, promisesArray, start, end, blob, index, getUploadUrlResp, presignedUrl, uploadResp, resolvedArray, uploadPartsArray, completeUploadResp;\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        // console.log('Inside uploadMultipartFile')\n                        fileSize = fileSelected.size;\n                        CHUNK_SIZE = 5000000; // 5MB\n\n                        CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1; // const CHUNKS_COUNT =20\n                        // const CHUNK_SIZE = fileSize/CHUNKS_COUNT // 5MB\n\n                        promisesArray = [];\n                        index = 1;\n\n                      case 5:\n                        if (!(index < CHUNKS_COUNT + 1)) {\n                          _context3.next = 19;\n                          break;\n                        }\n\n                        start = (index - 1) * CHUNK_SIZE;\n                        end = index * CHUNK_SIZE;\n                        blob = index < CHUNKS_COUNT ? fileSelected.slice(start, end) : fileSelected.slice(start); // Get presigned URL for each part\n\n                        _context3.next = 11;\n                        return axios.get(\"\".concat(backendUrl, \"/get-upload-url\"), {\n                          params: {\n                            fileName: fileName,\n                            partNumber: index,\n                            uploadId: uploadId\n                          }\n                        });\n\n                      case 11:\n                        getUploadUrlResp = _context3.sent;\n                        presignedUrl = getUploadUrlResp.data.presignedUrl;\n                        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + fileSelected.type); // Send part aws server\n\n                        uploadResp = axios.put(presignedUrl, blob, {\n                          headers: {\n                            'Content-Type': fileSelected.type\n                          }\n                        }).then(function (resp) {\n                          setuploadPC: uploadPC + 1;\n\n                          console.log(parseInt(uploadPC * CHUNK_SIZE / fileSize * 100) + \"% uploaded\");\n                          return resp;\n                        });\n                        promisesArray.push(uploadResp);\n\n                      case 16:\n                        index++;\n                        _context3.next = 5;\n                        break;\n\n                      case 19:\n                        _context3.next = 21;\n                        return Promise.all(promisesArray);\n\n                      case 21:\n                        resolvedArray = _context3.sent;\n                        console.log(resolvedArray, ' resolvedAr');\n                        uploadPartsArray = [];\n                        resolvedArray.forEach(function (resolvedPromise, index) {\n                          uploadPartsArray.push({\n                            ETag: resolvedPromise.headers.etag,\n                            PartNumber: index + 1\n                          });\n                        }); // CompleteMultipartUpload in the backend server\n\n                        _context3.next = 27;\n                        return axios.post(\"\".concat(backendUrl, \"/complete-upload\"), {\n                          params: {\n                            fileName: fileName,\n                            parts: uploadPartsArray,\n                            uploadId: uploadId\n                          }\n                        });\n\n                      case 27:\n                        completeUploadResp = _context3.sent;\n\n                        setUploadPC: 0;\n\n                        console.log(completeUploadResp.data, \"complete upload response\");\n\n                      case 30:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              })(), \"t0\", 2);\n\n            case 2:\n              _context4.next = 7;\n              break;\n\n            case 4:\n              _context4.prev = 4;\n              _context4.t1 = _context4[\"catch\"](0);\n              console.log(_context4.t1);\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 4]]);\n    }));\n\n    return function uploadMultipartFile() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, __jsx(\"form\", {\n    onSubmit: _this.startUpload.bind(_this),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, \"Upload Dataset:\"), __jsx(\"input\", {\n    type: \"file\",\n    id: \"file\",\n    onChange: _this.fileHandler.bind(_this),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, \"Upload\"))));\n});","map":{"version":3,"sources":["/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index.js"],"names":["React","Component","setState","axios","Index","fileSelected","setfileSelected","uploadId","setuploadId","fileName","setfileName","uploadPC","setuploadPC","backendUrl","setbackendUrl","fileHandler","event","target","files","name","err","console","error","message","startUpload","preventDefault","params","fileType","type","get","resp","data","uploadMultipartFile","log","fileSize","size","CHUNK_SIZE","CHUNKS_COUNT","Math","floor","promisesArray","index","start","end","blob","slice","partNumber","getUploadUrlResp","presignedUrl","uploadResp","put","headers","then","parseInt","push","Promise","all","resolvedArray","uploadPartsArray","forEach","resolvedPromise","ETag","etag","PartNumber","post","parts","completeUploadResp","setUploadPC","bind"],"mappings":"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","sourcesContent":["import React, { Component, setState } from 'react'\nimport axios from 'axios'\n\nexport default Index => {\n const [fileSelected, setfileSelected]=setState(null)\n  const [uploadId, setuploadId]=setState('')\n  const [fileName, setfileName]=setState('')\n  const [uploadPC, setuploadPC]=setState()\n  const [backendUrl, setbackendUrl]=setState('http://localhost:4000')\n\n  \n  // constructor(props) {\n  //   super(props)\n  //   this.state = {\n  //     fileSelected: null,\n  //     uploadId: '',\n  //     fileName: '',\n  //     backendUrl: 'http://localhost:4000',\n  //     uploadPC:0,\n  //   }\n  // }\n\n   fileHandler=async(event) =>{\n    try {\n      let fileSelected = event.target.files[0]\n      let fileName = fileSelected.name\n      setfileSelected({ fileSelected })\n      setfileName({ fileName })\n    } catch (err) {\n      console.error(err, err.message) \n    }\n  }\n\n   startUpload=async(event) =>{\n    try {\n      event.preventDefault()\n      const params = {\n        fileName: fileName,\n        fileType: fileSelected.type\n      };\n\n      let resp = await axios.get(`${backendUrl}/start-upload`, { params })\n      let { uploadId } = resp.data\n      setuploadId({ uploadId })\n      uploadMultipartFile()\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n   uploadMultipartFile=async() =>{\n    try {\n      // console.log('Inside uploadMultipartFile')\n      const fileSize = fileSelected.size\n      const CHUNK_SIZE = 5000000 // 5MB\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1\n      // const CHUNKS_COUNT =20\n      // const CHUNK_SIZE = fileSize/CHUNKS_COUNT // 5MB\n      let promisesArray = []\n      let start, end, blob\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE\n        end = (index) * CHUNK_SIZE\n        blob = (index < CHUNKS_COUNT) ? fileSelected.slice(start, end) : fileSelected.slice(start)\n\n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(`${backendUrl}/get-upload-url`, {\n          params: {\n            fileName: fileName,\n            partNumber: index,\n            uploadId: uploadId\n          }\n        })\n\n        let { presignedUrl } = getUploadUrlResp.data\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + fileSelected.type)\n\n        // Send part aws server\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            'Content-Type': fileSelected.type\n          }\n        }).then(resp => {\n            setuploadPC:uploadPC+1  \n          console.log(parseInt(((uploadPC*CHUNK_SIZE)/fileSize)*100) + \"% uploaded\" )\n\n          return resp\n        })\n        \n        promisesArray.push(uploadResp)\n        \n      }\n\n      let resolvedArray = await Promise.all(promisesArray)\n      console.log(resolvedArray, ' resolvedAr')\n\n      let uploadPartsArray = []\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        })\n\n      })\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(`${backendUrl}/complete-upload`, {\n        params: {\n          fileName: fileName,\n          parts: uploadPartsArray,\n          uploadId: uploadId\n        }\n      })\n      setUploadPC:0\n      console.log(completeUploadResp.data, \"complete upload response\")\n\n\n    } catch (err) {\n      console.log(err)\n    }\n  };\n\n    return (\n      <div>\n        <form onSubmit={this.startUpload.bind(this)}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input type='file' id='file' onChange={this.fileHandler.bind(this)} />\n            <button type='submit'>\n              Upload\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}