{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { Component, useState } from 'react';\nimport axios from 'axios';\n\nvar Index = function Index() {\n  _s();\n\n  var _useState = useState(null),\n      fileSelected = _useState[0],\n      setfileSelected = _useState[1];\n\n  var _useState2 = useState(''),\n      uploadId = _useState2[0],\n      setuploadId = _useState2[1];\n\n  var _useState3 = useState(''),\n      fileName = _useState3[0],\n      setfileName = _useState3[1];\n\n  var _useState4 = useState(),\n      uploadPC = _useState4[0],\n      setuploadPC = _useState4[1];\n\n  var _useState5 = useState('http://localhost:4000'),\n      backendUrl = _useState5[0],\n      setbackendUrl = _useState5[1]; // constructor(props) {\n  //   super(props)\n  //   this.state = {\n  //     fileSelected: null,\n  //     uploadId: '',\n  //     fileName: '',\n  //     backendUrl: 'http://localhost:4000',\n  //     uploadPC:0,\n  //   }\n  // }\n\n\n  var fileHandler = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(e); // try {\n              //   let fileSelected = event.target.files[0]\n              //   let fileName = fileSelected.name\n              //   setfileSelected({ fileSelected })\n              //   setfileName({ fileName })\n              // } catch (err) {\n              //   console.error(err, err.message) \n              // }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fileHandler(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var startUpload = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n      var params, resp, _uploadId;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              event.preventDefault();\n              params = {\n                fileName: fileName,\n                fileType: fileSelected.type\n              };\n              _context2.next = 5;\n              return axios.get(\"\".concat(backendUrl, \"/start-upload\"), {\n                params: params\n              });\n\n            case 5:\n              resp = _context2.sent;\n              _uploadId = resp.data.uploadId;\n              setuploadId({\n                uploadId: _uploadId\n              });\n              uploadMultipartFile();\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 11]]);\n    }));\n\n    return function startUpload(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var uploadMultipartFile = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              return _context4.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                var fileSize, CHUNK_SIZE, CHUNKS_COUNT, promisesArray, start, end, blob, index, getUploadUrlResp, presignedUrl, uploadResp, resolvedArray, uploadPartsArray, completeUploadResp;\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        // console.log('Inside uploadMultipartFile')\n                        fileSize = fileSelected.size;\n                        CHUNK_SIZE = 5000000; // 5MB\n\n                        CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1; // const CHUNKS_COUNT =20\n                        // const CHUNK_SIZE = fileSize/CHUNKS_COUNT // 5MB\n\n                        promisesArray = [];\n                        index = 1;\n\n                      case 5:\n                        if (!(index < CHUNKS_COUNT + 1)) {\n                          _context3.next = 19;\n                          break;\n                        }\n\n                        start = (index - 1) * CHUNK_SIZE;\n                        end = index * CHUNK_SIZE;\n                        blob = index < CHUNKS_COUNT ? fileSelected.slice(start, end) : fileSelected.slice(start); // Get presigned URL for each part\n\n                        _context3.next = 11;\n                        return axios.get(\"\".concat(backendUrl, \"/get-upload-url\"), {\n                          params: {\n                            fileName: fileName,\n                            partNumber: index,\n                            uploadId: uploadId\n                          }\n                        });\n\n                      case 11:\n                        getUploadUrlResp = _context3.sent;\n                        presignedUrl = getUploadUrlResp.data.presignedUrl;\n                        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + fileSelected.type); // Send part aws server\n\n                        uploadResp = axios.put(presignedUrl, blob, {\n                          headers: {\n                            'Content-Type': fileSelected.type\n                          }\n                        }).then(function (resp) {\n                          setuploadPC: uploadPC + 1;\n\n                          console.log(parseInt(uploadPC * CHUNK_SIZE / fileSize * 100) + \"% uploaded\");\n                          return resp;\n                        });\n                        promisesArray.push(uploadResp);\n\n                      case 16:\n                        index++;\n                        _context3.next = 5;\n                        break;\n\n                      case 19:\n                        _context3.next = 21;\n                        return Promise.all(promisesArray);\n\n                      case 21:\n                        resolvedArray = _context3.sent;\n                        console.log(resolvedArray, ' resolvedAr');\n                        uploadPartsArray = [];\n                        resolvedArray.forEach(function (resolvedPromise, index) {\n                          uploadPartsArray.push({\n                            ETag: resolvedPromise.headers.etag,\n                            PartNumber: index + 1\n                          });\n                        }); // CompleteMultipartUpload in the backend server\n\n                        _context3.next = 27;\n                        return axios.post(\"\".concat(backendUrl, \"/complete-upload\"), {\n                          params: {\n                            fileName: fileName,\n                            parts: uploadPartsArray,\n                            uploadId: uploadId\n                          }\n                        });\n\n                      case 27:\n                        completeUploadResp = _context3.sent;\n\n                        setUploadPC: 0;\n\n                        console.log(completeUploadResp.data, \"complete upload response\");\n\n                      case 30:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              })(), \"t0\", 2);\n\n            case 2:\n              _context4.next = 7;\n              break;\n\n            case 4:\n              _context4.prev = 4;\n              _context4.t1 = _context4[\"catch\"](0);\n              console.log(_context4.t1);\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 4]]);\n    }));\n\n    return function uploadMultipartFile() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, __jsx(\"form\", {\n    onSubmit: function onSubmit() {\n      return startUpload();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"Upload Dataset:\"), __jsx(\"input\", {\n    type: \"file\",\n    id: \"file\",\n    onChange: fileHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, \"Upload\"))));\n};\n\n_s(Index, \"9szquFsBlE6qCP1CDEg6JXmqBaU=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index.js"],"names":["React","Component","useState","axios","Index","fileSelected","setfileSelected","uploadId","setuploadId","fileName","setfileName","uploadPC","setuploadPC","backendUrl","setbackendUrl","fileHandler","e","console","log","startUpload","event","preventDefault","params","fileType","type","get","resp","data","uploadMultipartFile","fileSize","size","CHUNK_SIZE","CHUNKS_COUNT","Math","floor","promisesArray","index","start","end","blob","slice","partNumber","getUploadUrlResp","presignedUrl","uploadResp","put","headers","then","parseInt","push","Promise","all","resolvedArray","uploadPartsArray","forEach","resolvedPromise","ETag","etag","PartNumber","post","parts","completeUploadResp","setUploadPC"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react'\nimport axios from 'axios'\n\nconst Index=() => {\n const [fileSelected, setfileSelected]=useState(null)\n  const [uploadId, setuploadId]=useState('')\n  const [fileName, setfileName]=useState('')\n  const [uploadPC, setuploadPC]=useState()\n  const [backendUrl, setbackendUrl]=useState('http://localhost:4000')\n\n  \n  // constructor(props) {\n  //   super(props)\n  //   this.state = {\n  //     fileSelected: null,\n  //     uploadId: '',\n  //     fileName: '',\n  //     backendUrl: 'http://localhost:4000',\n  //     uploadPC:0,\n  //   }\n  // }\n\n  const fileHandler=async(e) =>{\n    console.log(e)\n    // try {\n    //   let fileSelected = event.target.files[0]\n    //   let fileName = fileSelected.name\n    //   setfileSelected({ fileSelected })\n    //   setfileName({ fileName })\n    // } catch (err) {\n    //   console.error(err, err.message) \n    // }\n  }\n\n   const startUpload=async(event) =>{\n    try {\n      event.preventDefault()\n      const params = {\n        fileName: fileName,\n        fileType: fileSelected.type\n      };\n\n      let resp = await axios.get(`${backendUrl}/start-upload`, { params })\n      let { uploadId } = resp.data\n      setuploadId({ uploadId })\n      uploadMultipartFile()\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n   const uploadMultipartFile=async() =>{\n    try {\n      // console.log('Inside uploadMultipartFile')\n      const fileSize = fileSelected.size\n      const CHUNK_SIZE = 5000000 // 5MB\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1\n      // const CHUNKS_COUNT =20\n      // const CHUNK_SIZE = fileSize/CHUNKS_COUNT // 5MB\n      let promisesArray = []\n      let start, end, blob\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE\n        end = (index) * CHUNK_SIZE\n        blob = (index < CHUNKS_COUNT) ? fileSelected.slice(start, end) : fileSelected.slice(start)\n\n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(`${backendUrl}/get-upload-url`, {\n          params: {\n            fileName: fileName,\n            partNumber: index,\n            uploadId: uploadId\n          }\n        })\n\n        let { presignedUrl } = getUploadUrlResp.data\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + fileSelected.type)\n\n        // Send part aws server\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            'Content-Type': fileSelected.type\n          }\n        }).then(resp => {\n            setuploadPC:uploadPC+1  \n          console.log(parseInt(((uploadPC*CHUNK_SIZE)/fileSize)*100) + \"% uploaded\" )\n\n          return resp\n        })\n        \n        promisesArray.push(uploadResp)\n        \n      }\n\n      let resolvedArray = await Promise.all(promisesArray)\n      console.log(resolvedArray, ' resolvedAr')\n\n      let uploadPartsArray = []\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        })\n\n      })\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(`${backendUrl}/complete-upload`, {\n        params: {\n          fileName: fileName,\n          parts: uploadPartsArray,\n          uploadId: uploadId\n        }\n      })\n      setUploadPC:0\n      console.log(completeUploadResp.data, \"complete upload response\")\n\n\n    } catch (err) {\n      console.log(err)\n    }\n  };\n\n    return (\n      <div>\n        <form onSubmit={()=>startUpload()}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input type='file' id='file' onChange={fileHandler} />\n            <button type='submit'>\n              Upload\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}