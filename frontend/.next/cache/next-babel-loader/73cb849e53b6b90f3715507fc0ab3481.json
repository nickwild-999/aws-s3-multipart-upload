{"ast":null,"code":"var _jsxFileName = \"/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState } from 'react';\nimport axios from 'axios';\n\nconst Index = () => {\n  const {\n    0: fileSelected,\n    1: setfileSelected\n  } = useState(null);\n  const {\n    0: uploadId,\n    1: setuploadId\n  } = useState('');\n  const {\n    0: fileName,\n    1: setfileName\n  } = useState('');\n  const {\n    0: uploadPC,\n    1: setuploadPC\n  } = useState();\n  const {\n    0: backendUrl,\n    1: setbackendUrl\n  } = useState('http://localhost:4000'); // constructor(props) {\n  //   super(props)\n  //   this.state = {\n  //     fileSelected: null,\n  //     uploadId: '',\n  //     fileName: '',\n  //     backendUrl: 'http://localhost:4000',\n  //     uploadPC:0,\n  //   }\n  // }\n\n  const fileHandler = async event => {\n    console.log(event); // try {\n    //   let fileSelected = event.target.files[0]\n    //   let fileName = fileSelected.name\n    //   setfileSelected({ fileSelected })\n    //   setfileName({ fileName })\n    // } catch (err) {\n    //   console.error(err, err.message) \n    // }\n  };\n\n  const startUpload = async event => {\n    try {\n      event.preventDefault();\n      const params = {\n        fileName: fileName,\n        fileType: fileSelected.type\n      };\n      let resp = await axios.get(`${backendUrl}/start-upload`, {\n        params\n      });\n      let {\n        uploadId\n      } = resp.data;\n      setuploadId({\n        uploadId\n      });\n      uploadMultipartFile();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const uploadMultipartFile = async () => {\n    try {\n      // console.log('Inside uploadMultipartFile')\n      const fileSize = fileSelected.size;\n      const CHUNK_SIZE = 5000000; // 5MB\n\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1; // const CHUNKS_COUNT =20\n      // const CHUNK_SIZE = fileSize/CHUNKS_COUNT // 5MB\n\n      let promisesArray = [];\n      let start, end, blob;\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE;\n        end = index * CHUNK_SIZE;\n        blob = index < CHUNKS_COUNT ? fileSelected.slice(start, end) : fileSelected.slice(start); // Get presigned URL for each part\n\n        let getUploadUrlResp = await axios.get(`${backendUrl}/get-upload-url`, {\n          params: {\n            fileName: fileName,\n            partNumber: index,\n            uploadId: uploadId\n          }\n        });\n        let {\n          presignedUrl\n        } = getUploadUrlResp.data;\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + fileSelected.type); // Send part aws server\n\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            'Content-Type': fileSelected.type\n          }\n        }).then(resp => {\n          setuploadPC: uploadPC + 1;\n\n          console.log(parseInt(uploadPC * CHUNK_SIZE / fileSize * 100) + \"% uploaded\");\n          return resp;\n        });\n        promisesArray.push(uploadResp);\n      }\n\n      let resolvedArray = await Promise.all(promisesArray);\n      console.log(resolvedArray, ' resolvedAr');\n      let uploadPartsArray = [];\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        });\n      }); // CompleteMultipartUpload in the backend server\n\n      let completeUploadResp = await axios.post(`${backendUrl}/complete-upload`, {\n        params: {\n          fileName: fileName,\n          parts: uploadPartsArray,\n          uploadId: uploadId\n        }\n      });\n\n      setUploadPC: 0;\n\n      console.log(completeUploadResp.data, \"complete upload response\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, __jsx(\"form\", {\n    onSubmit: () => startUpload(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"Upload Dataset:\"), __jsx(\"input\", {\n    type: \"file\",\n    id: \"file\",\n    onChange: () => fileHandler(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, \"Upload\"))));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index.js"],"names":["React","Component","useState","axios","Index","fileSelected","setfileSelected","uploadId","setuploadId","fileName","setfileName","uploadPC","setuploadPC","backendUrl","setbackendUrl","fileHandler","event","console","log","startUpload","preventDefault","params","fileType","type","resp","get","data","uploadMultipartFile","err","fileSize","size","CHUNK_SIZE","CHUNKS_COUNT","Math","floor","promisesArray","start","end","blob","index","slice","getUploadUrlResp","partNumber","presignedUrl","uploadResp","put","headers","then","parseInt","push","resolvedArray","Promise","all","uploadPartsArray","forEach","resolvedPromise","ETag","etag","PartNumber","completeUploadResp","post","parts","setUploadPC"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react'\nimport axios from 'axios'\n\nconst Index=() => {\n const [fileSelected, setfileSelected]=useState(null)\n  const [uploadId, setuploadId]=useState('')\n  const [fileName, setfileName]=useState('')\n  const [uploadPC, setuploadPC]=useState()\n  const [backendUrl, setbackendUrl]=useState('http://localhost:4000')\n\n  \n  // constructor(props) {\n  //   super(props)\n  //   this.state = {\n  //     fileSelected: null,\n  //     uploadId: '',\n  //     fileName: '',\n  //     backendUrl: 'http://localhost:4000',\n  //     uploadPC:0,\n  //   }\n  // }\n\n  const fileHandler=async(event) =>{\n    console.log(event)\n    // try {\n    //   let fileSelected = event.target.files[0]\n    //   let fileName = fileSelected.name\n    //   setfileSelected({ fileSelected })\n    //   setfileName({ fileName })\n    // } catch (err) {\n    //   console.error(err, err.message) \n    // }\n  }\n\n   const startUpload=async(event) =>{\n    try {\n      event.preventDefault()\n      const params = {\n        fileName: fileName,\n        fileType: fileSelected.type\n      };\n\n      let resp = await axios.get(`${backendUrl}/start-upload`, { params })\n      let { uploadId } = resp.data\n      setuploadId({ uploadId })\n      uploadMultipartFile()\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n   const uploadMultipartFile=async() =>{\n    try {\n      // console.log('Inside uploadMultipartFile')\n      const fileSize = fileSelected.size\n      const CHUNK_SIZE = 5000000 // 5MB\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1\n      // const CHUNKS_COUNT =20\n      // const CHUNK_SIZE = fileSize/CHUNKS_COUNT // 5MB\n      let promisesArray = []\n      let start, end, blob\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE\n        end = (index) * CHUNK_SIZE\n        blob = (index < CHUNKS_COUNT) ? fileSelected.slice(start, end) : fileSelected.slice(start)\n\n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(`${backendUrl}/get-upload-url`, {\n          params: {\n            fileName: fileName,\n            partNumber: index,\n            uploadId: uploadId\n          }\n        })\n\n        let { presignedUrl } = getUploadUrlResp.data\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + fileSelected.type)\n\n        // Send part aws server\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            'Content-Type': fileSelected.type\n          }\n        }).then(resp => {\n            setuploadPC:uploadPC+1  \n          console.log(parseInt(((uploadPC*CHUNK_SIZE)/fileSize)*100) + \"% uploaded\" )\n\n          return resp\n        })\n        \n        promisesArray.push(uploadResp)\n        \n      }\n\n      let resolvedArray = await Promise.all(promisesArray)\n      console.log(resolvedArray, ' resolvedAr')\n\n      let uploadPartsArray = []\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        })\n\n      })\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(`${backendUrl}/complete-upload`, {\n        params: {\n          fileName: fileName,\n          parts: uploadPartsArray,\n          uploadId: uploadId\n        }\n      })\n      setUploadPC:0\n      console.log(completeUploadResp.data, \"complete upload response\")\n\n\n    } catch (err) {\n      console.log(err)\n    }\n  };\n\n    return (\n      <div>\n        <form onSubmit={()=>startUpload()}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input type='file' id='file' onChange={()=>fileHandler(event)} />\n            <button type='submit'>\n              Upload\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}