{"ast":null,"code":"var _jsxFileName = \"/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index-as-function.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst Index = () => {\n  const {\n    0: fileSelected,\n    1: setfileSelected\n  } = useState(null);\n  const {\n    0: uploadId,\n    1: setuploadId\n  } = useState('');\n  const {\n    0: Fred,\n    1: setFred\n  } = useState('');\n  const {\n    0: fileName,\n    1: setfileName\n  } = useState('');\n  const {\n    0: fileType,\n    1: setfileType\n  } = useState(''); // const [uploadPC, setuploadPC]=useState()\n\n  const {\n    0: backendUrl,\n    1: setbackendUrl\n  } = useState('http://localhost:4000');\n  const {\n    0: progressArray,\n    1: setprogressArray\n  } = useState([]);\n  const {\n    0: uploadProgress,\n    1: setuploadProgress\n  } = useState(0);\n  useEffect(() => {\n    if (Fred) uploadMultipartFile();\n  }, [Fred]);\n\n  const fileHandler = async e => {\n    try {\n      let fileSelected = document.getElementById('myfile').files[0];\n      let fileName = fileSelected.name;\n      let fileType = fileSelected.type;\n      setfileSelected(fileSelected);\n      setfileName(fileName);\n      setfileType(fileType); // console.log(fileSelected)\n    } catch (err) {\n      console.error(err, err.message);\n    }\n  };\n\n  const startUpload = async e => {\n    try {\n      e.preventDefault();\n      const params = {\n        fileName: fileName,\n        fileType: fileSelected.type\n      };\n      let resp = await axios.get(`${backendUrl}/start-upload`, {\n        params\n      });\n      const {\n        uploadId\n      } = resp.data;\n      setFred(uploadId);\n    } catch (err) {\n      console.log(\"startupload \", err);\n    }\n  };\n\n  const uploadMultipartFile = async () => {\n    try {\n      console.log(\"I am Fred:\", Fred);\n      const fileSize = fileSelected.size;\n      const CHUNK_SIZE = 10000000; // 10MB\n\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n      let promisesArray = [];\n      let start, end, blob;\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE;\n        end = index * CHUNK_SIZE;\n        blob = index < CHUNKS_COUNT ? fileSelected.slice(start, end) : fileSelected.slice(start); // Get presigned URL for each part\n\n        let getUploadUrlResp = await axios.get(`${backendUrl}/get-upload-url`, {\n          params: {\n            fileName: fileName,\n            partNumber: index,\n            uploadId: Fred\n          }\n        });\n        let {\n          presignedUrl\n        } = getUploadUrlResp.data;\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + fileSelected.type); // Send part aws server\n\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            'Content-Type': fileSelected.type\n          }\n        });\n        promisesArray.push(uploadResp);\n      }\n\n      let resolvedArray = await Promise.all(promisesArray);\n      console.log(resolvedArray, ' resolvedArray');\n      let uploadPartsArray = [];\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        });\n      });\n      console.log({\n        uploadPartsArray\n      });\n      console.log(\"I am Fred:\", Fred);\n      console.log({\n        fileName\n      }); // CompleteMultipartUpload in the backend server\n\n      let completeUploadResp = await axios.post(`${backendUrl}/complete-upload`, {\n        params: {\n          fileName: fileName,\n          parts: uploadPartsArray,\n          uploadId: Fred\n        }\n      });\n      console.log(completeUploadResp.data, \"complete upload response\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, __jsx(\"form\", {\n    onSubmit: startUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, \"Upload Dataset:\"), __jsx(\"input\", {\n    type: \"file\",\n    id: \"myfile\",\n    onChange: fileHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, \"Upload\"))));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index-as-function.js"],"names":["React","Component","useState","useEffect","axios","Index","fileSelected","setfileSelected","uploadId","setuploadId","Fred","setFred","fileName","setfileName","fileType","setfileType","backendUrl","setbackendUrl","progressArray","setprogressArray","uploadProgress","setuploadProgress","uploadMultipartFile","fileHandler","e","document","getElementById","files","name","type","err","console","error","message","startUpload","preventDefault","params","resp","get","data","log","fileSize","size","CHUNK_SIZE","CHUNKS_COUNT","Math","floor","promisesArray","start","end","blob","index","slice","getUploadUrlResp","partNumber","presignedUrl","uploadResp","put","headers","push","resolvedArray","Promise","all","uploadPartsArray","forEach","resolvedPromise","ETag","etag","PartNumber","completeUploadResp","post","parts"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst Index=() => {\n const [fileSelected, setfileSelected]=useState(null)\n  const [uploadId, setuploadId]=useState('')\n  const [Fred, setFred]=useState('')\n  const [fileName, setfileName]=useState('')\n  const [fileType, setfileType]=useState('')\n  // const [uploadPC, setuploadPC]=useState()\n  const [backendUrl, setbackendUrl]=useState('http://localhost:4000')\n  const [progressArray, setprogressArray]=useState([])\n  const [uploadProgress, setuploadProgress]=useState(0)\n\n  useEffect(() => {\n    if (Fred) \n    uploadMultipartFile()\n  }, [Fred]);\n  \n  const fileHandler=async(e) =>{\n    try {\n      let fileSelected = document.getElementById('myfile').files[0]\n      let fileName = fileSelected.name\n      let fileType = fileSelected.type\n      setfileSelected(fileSelected)\n      setfileName(fileName)\n      setfileType(fileType)\n      // console.log(fileSelected)\n    } catch (err) {\n      console.error(err, err.message) \n    }\n  }\n\n   const startUpload=async(e) =>{\n    try {\n      e.preventDefault()\n      \n      const params = {\n        fileName: fileName,\n        fileType: fileSelected.type\n      };\n      \n      let resp = await axios.get(`${backendUrl}/start-upload`, { params })\n      const { uploadId } = resp.data\n      setFred(uploadId)\n    } catch (err) {\n      console.log(\"startupload \",err)\n    }\n  }\n\n   const uploadMultipartFile=async() =>{    \n    try {\n      console.log(\"I am Fred:\",Fred)\n      const fileSize = fileSelected.size\n      const CHUNK_SIZE = 10000000 // 10MB\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1\n      let promisesArray = []\n      let start, end, blob\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE\n        end = (index) * CHUNK_SIZE\n        blob = (index < CHUNKS_COUNT) ? fileSelected.slice(start, end) : fileSelected.slice(start)\n\n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(`${backendUrl}/get-upload-url`, {\n          params: {\n            fileName: fileName,\n            partNumber: index,\n            uploadId: Fred,\n          }\n        })\n        let { presignedUrl } = getUploadUrlResp.data\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + fileSelected.type)\n\n        // Send part aws server\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            'Content-Type': fileSelected.type\n          }\n        })\n        promisesArray.push(uploadResp)\n      }\n\n\n      let resolvedArray = await Promise.all(promisesArray)\n      console.log(resolvedArray, ' resolvedArray')\n\n      let uploadPartsArray = []\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        })\n\n      })\n\n      console.log({uploadPartsArray})\n      console.log(\"I am Fred:\", Fred)\n      console.log({fileName})\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(`${backendUrl}/complete-upload`, {\n        params: {\n          fileName: fileName,\n          parts: uploadPartsArray,\n          uploadId: Fred\n        }\n      })\n      console.log(completeUploadResp.data, \"complete upload response\")\n\n    } catch (err) {\n      console.log(err)\n    }\n  };\n\n    return (\n      <div>\n        <form onSubmit={startUpload}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input type='file' id='myfile' onChange={fileHandler} />\n            <button type='submit'>\n              Upload\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}