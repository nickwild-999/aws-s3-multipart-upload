{"ast":null,"code":"var _jsxFileName = \"/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport axios from 'axios';\nexport default class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileSelected: null,\n      uploadId: '',\n      fileName: '',\n      backendUrl: 'http://localhost:4000',\n      uploadPC: 0\n    };\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0];\n      let fileName = fileSelected.name;\n      this.setState({\n        fileSelected\n      });\n      this.setState({\n        fileName\n      });\n    } catch (err) {\n      console.error(err, err.message);\n    }\n  }\n\n  async startUpload(event) {\n    try {\n      event.preventDefault();\n      const params = {\n        fileName: this.state.fileName,\n        fileType: this.state.fileSelected.type\n      };\n      let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {\n        params\n      });\n      let {\n        uploadId\n      } = resp.data;\n      this.setState({\n        uploadId\n      });\n      this.uploadMultipartFile();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      console.log('Inside uploadMultipartFile');\n      const fileSize = this.state.fileSelected.size; // const CHUNK_SIZE = 5000000 // 5MB\n\n      const CHUNKS_COUNT = 20; // const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1\n\n      const CHUNK_SIZE = fileSize / CHUNKS_COUNT; // 5MB\n\n      let promisesArray = [];\n      let start, end, blob;\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE;\n        end = index * CHUNK_SIZE;\n        blob = index < CHUNKS_COUNT ? this.state.fileSelected.slice(start, end) : this.state.fileSelected.slice(start); // Get presigned URL for each part\n\n        let getUploadUrlResp = await axios.get(`${this.state.backendUrl}/get-upload-url`, {\n          params: {\n            fileName: this.state.fileName,\n            partNumber: index,\n            uploadId: this.state.uploadId\n          }\n        });\n        let {\n          presignedUrl\n        } = getUploadUrlResp.data;\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + this.state.fileSelected.type); // Send part aws server\n\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            'Content-Type': this.state.fileSelected.type\n          }\n        }).then(resp => {\n          this.setState({\n            uploadPC: this.state.uploadPC + 1\n          });\n          console.log(parseInt(this.state.uploadPC * CHUNK_SIZE / fileSize * 100) + \"% uploaded\");\n          return resp;\n        });\n        promisesArray.push(uploadResp);\n      }\n\n      let resolvedArray = await Promise.all(promisesArray);\n      console.log(resolvedArray, ' resolvedAr');\n      let uploadPartsArray = [];\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        });\n      }); // CompleteMultipartUpload in the backend server\n\n      let completeUploadResp = await axios.post(`${this.state.backendUrl}/complete-upload`, {\n        params: {\n          fileName: this.state.fileName,\n          parts: uploadPartsArray,\n          uploadId: this.state.uploadId\n        }\n      });\n      console.log(completeUploadResp.data, \"complete upload response\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, __jsx(\"form\", {\n      onSubmit: this.startUpload.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, \"Upload Dataset:\"), __jsx(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      onChange: this.fileHandler.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, \"Upload\"))));\n  }\n\n}","map":{"version":3,"sources":["/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index.js"],"names":["React","Component","axios","Index","constructor","props","state","fileSelected","uploadId","fileName","backendUrl","uploadPC","fileHandler","event","target","files","name","setState","err","console","error","message","startUpload","preventDefault","params","fileType","type","resp","get","data","uploadMultipartFile","log","fileSize","size","CHUNKS_COUNT","CHUNK_SIZE","promisesArray","start","end","blob","index","slice","getUploadUrlResp","partNumber","presignedUrl","uploadResp","put","headers","then","parseInt","push","resolvedArray","Promise","all","uploadPartsArray","forEach","resolvedPromise","ETag","etag","PartNumber","completeUploadResp","post","parts","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\n\nexport default class Index extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      fileSelected: null,\n      uploadId: '',\n      fileName: '',\n      backendUrl: 'http://localhost:4000',\n      uploadPC:0\n    }\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0]\n      let fileName = fileSelected.name\n      this.setState({ fileSelected })\n      this.setState({ fileName })\n    } catch (err) {\n      console.error(err, err.message) \n    }\n  }\n\n  async startUpload(event) {\n    try {\n      event.preventDefault()\n      const params = {\n        fileName: this.state.fileName,\n        fileType: this.state.fileSelected.type\n      };\n\n      let resp = await axios.get(`${this.state.backendUrl}/start-upload`, { params })\n      let { uploadId } = resp.data\n      this.setState({ uploadId })\n      this.uploadMultipartFile()\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      console.log('Inside uploadMultipartFile')\n      const fileSize = this.state.fileSelected.size\n      // const CHUNK_SIZE = 5000000 // 5MB\n      const CHUNKS_COUNT =20\n      // const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1\n      const CHUNK_SIZE = fileSize/CHUNKS_COUNT // 5MB\n      let promisesArray = []\n      let start, end, blob\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE\n        end = (index) * CHUNK_SIZE\n        blob = (index < CHUNKS_COUNT) ? this.state.fileSelected.slice(start, end) : this.state.fileSelected.slice(start)\n\n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(`${this.state.backendUrl}/get-upload-url`, {\n          params: {\n            fileName: this.state.fileName,\n            partNumber: index,\n            uploadId: this.state.uploadId\n          }\n        })\n\n        let { presignedUrl } = getUploadUrlResp.data\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + this.state.fileSelected.type)\n\n        // Send part aws server\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            'Content-Type': this.state.fileSelected.type\n          }\n        }).then(resp => {\n          this.setState({ \n            uploadPC:this.state.uploadPC+1  \n          })\n          console.log(parseInt(((this.state.uploadPC*CHUNK_SIZE)/fileSize)*100) + \"% uploaded\" )\n\n          return resp\n        })\n        \n        promisesArray.push(uploadResp)\n        \n      }\n\n      let resolvedArray = await Promise.all(promisesArray)\n      console.log(resolvedArray, ' resolvedAr')\n\n      let uploadPartsArray = []\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        })\n\n      })\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(`${this.state.backendUrl}/complete-upload`, {\n        params: {\n          fileName: this.state.fileName,\n          parts: uploadPartsArray,\n          uploadId: this.state.uploadId\n        }\n      })\n\n      console.log(completeUploadResp.data, \"complete upload response\")\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.startUpload.bind(this)}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input type='file' id='file' onChange={this.fileHandler.bind(this)} />\n            <button type='submit'>\n              Upload\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}