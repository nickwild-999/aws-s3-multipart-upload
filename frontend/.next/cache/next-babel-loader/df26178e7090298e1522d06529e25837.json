{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { Component, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nvar Index = function Index() {\n  _s();\n\n  var _useState = useState(null),\n      fileSelected = _useState[0],\n      setfileSelected = _useState[1];\n\n  var _useState2 = useState(''),\n      uploadId = _useState2[0],\n      setuploadId = _useState2[1];\n\n  var _useState3 = useState(''),\n      Fred = _useState3[0],\n      setFred = _useState3[1];\n\n  var _useState4 = useState(''),\n      fileName = _useState4[0],\n      setfileName = _useState4[1];\n\n  var _useState5 = useState(''),\n      fileType = _useState5[0],\n      setfileType = _useState5[1];\n\n  var _useState6 = useState(),\n      uploadPC = _useState6[0],\n      setuploadPC = _useState6[1];\n\n  var _useState7 = useState('http://localhost:4000'),\n      backendUrl = _useState7[0],\n      setbackendUrl = _useState7[1]; // constructor(props) {\n  //   super(props)\n  //   this.state = {\n  //     fileSelected: null,\n  //     uploadId: '',\n  //     fileName: '',\n  //     backendUrl: 'http://localhost:4000',\n  //     uploadPC:0,\n  //   }\n  // }\n\n\n  useEffect(function () {\n    console.log(\"inside useEffect: \", Fred);\n  }, [Fred]);\n\n  var fileHandler = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _fileSelected, _fileName, _fileType;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // console.log(e)\n              try {\n                _fileSelected = document.getElementById('myfile').files[0];\n                _fileName = _fileSelected.name;\n                _fileType = _fileSelected.type;\n                setfileSelected(_fileSelected);\n                setfileName(_fileName);\n                setfileType(_fileType);\n                console.log(_fileSelected);\n              } catch (err) {\n                console.error(err, err.message);\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fileHandler(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var startUpload = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      var params, resp, _uploadId;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              e.preventDefault();\n              params = {\n                fileName: fileName,\n                fileType: fileSelected.type\n              };\n              _context2.next = 5;\n              return axios.get(\"\".concat(backendUrl, \"/start-upload\"), {\n                params: params\n              });\n\n            case 5:\n              resp = _context2.sent;\n              _uploadId = resp.data.uploadId;\n              console.log(_uploadId); // this is all OK\n\n              setFred(_uploadId);\n              console.log(Fred); //\"This displays the previous cycle: \",\n\n              uploadMultipartFile();\n              _context2.next = 16;\n              break;\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(\"startupload \", _context2.t0);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 13]]);\n    }));\n\n    return function startUpload(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var uploadMultipartFile = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              return _context4.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                var fileSize, CHUNK_SIZE, CHUNKS_COUNT, promisesArray, start, end, blob, index, getUploadUrlResp, presignedUrl, uploadResp, resolvedArray, uploadPartsArray, completeUploadResp;\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        console.log('Inside uploadMultipartFile', uploadId);\n                        fileSize = fileSelected.size;\n                        CHUNK_SIZE = 5000000; // 5MB\n\n                        CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1; // const CHUNKS_COUNT =20\n                        // const CHUNK_SIZE = fileSize/CHUNKS_COUNT // 5MB\n\n                        promisesArray = [];\n                        console.log(uploadId);\n                        index = 1;\n\n                      case 7:\n                        if (!(index < CHUNKS_COUNT + 1)) {\n                          _context3.next = 22;\n                          break;\n                        }\n\n                        start = (index - 1) * CHUNK_SIZE;\n                        end = index * CHUNK_SIZE;\n                        blob = index < CHUNKS_COUNT ? fileSelected.slice(start, end) : fileSelected.slice(start); // Get presigned URL for each part\n\n                        _context3.next = 13;\n                        return axios.get(\"\".concat(backendUrl, \"/get-upload-url\"), {\n                          params: {\n                            fileName: fileName,\n                            partNumber: index,\n                            uploadId: Fred\n                          }\n                        });\n\n                      case 13:\n                        getUploadUrlResp = _context3.sent;\n                        presignedUrl = getUploadUrlResp.data.presignedUrl;\n                        console.log(presignedUrl);\n                        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + fileSelected.type); // Send part aws server\n\n                        uploadResp = axios.put(presignedUrl, blob, {\n                          headers: {\n                            'Content-Type': fileSelected.type\n                          }\n                        }).then(function (resp) {\n                          setuploadPC: uploadPC + 1;\n\n                          console.log(parseInt(uploadPC * CHUNK_SIZE / fileSize * 100) + \"% uploaded\");\n                          return resp;\n                        });\n                        promisesArray.push(uploadResp);\n\n                      case 19:\n                        index++;\n                        _context3.next = 7;\n                        break;\n\n                      case 22:\n                        _context3.next = 24;\n                        return Promise.all(promisesArray);\n\n                      case 24:\n                        resolvedArray = _context3.sent;\n                        console.log(resolvedArray, ' resolvedAr');\n                        uploadPartsArray = [];\n                        resolvedArray.forEach(function (resolvedPromise, index) {\n                          uploadPartsArray.push({\n                            ETag: resolvedPromise.headers.etag,\n                            PartNumber: index + 1\n                          });\n                        }); // CompleteMultipartUpload in the backend server\n\n                        _context3.next = 30;\n                        return axios.post(\"\".concat(backendUrl, \"/complete-upload\"), {\n                          params: {\n                            fileName: fileName,\n                            parts: uploadPartsArray,\n                            uploadId: Fred\n                          }\n                        });\n\n                      case 30:\n                        completeUploadResp = _context3.sent;\n\n                        setUploadPC: 0;\n\n                        console.log(completeUploadResp.data, \"complete upload response\");\n\n                      case 33:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              })(), \"t0\", 2);\n\n            case 2:\n              _context4.next = 7;\n              break;\n\n            case 4:\n              _context4.prev = 4;\n              _context4.t1 = _context4[\"catch\"](0);\n              console.log(_context4.t1);\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 4]]);\n    }));\n\n    return function uploadMultipartFile() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, __jsx(\"form\", {\n    onSubmit: startUpload,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, \"Upload Dataset:\"), __jsx(\"input\", {\n    type: \"file\",\n    id: \"myfile\",\n    onChange: fileHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, \"Upload\"))));\n};\n\n_s(Index, \"rm2I1vlzjQ5sABKUz97fCh6HAFQ=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index.js"],"names":["React","Component","useState","useEffect","axios","Index","fileSelected","setfileSelected","uploadId","setuploadId","Fred","setFred","fileName","setfileName","fileType","setfileType","uploadPC","setuploadPC","backendUrl","setbackendUrl","console","log","fileHandler","e","document","getElementById","files","name","type","err","error","message","startUpload","preventDefault","params","get","resp","data","uploadMultipartFile","fileSize","size","CHUNK_SIZE","CHUNKS_COUNT","Math","floor","promisesArray","index","start","end","blob","slice","partNumber","getUploadUrlResp","presignedUrl","uploadResp","put","headers","then","parseInt","push","Promise","all","resolvedArray","uploadPartsArray","forEach","resolvedPromise","ETag","etag","PartNumber","post","parts","completeUploadResp","setUploadPC"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst Index=() => {\n const [fileSelected, setfileSelected]=useState(null)\n  const [uploadId, setuploadId]=useState('')\n  const [Fred, setFred]=useState('')\n  const [fileName, setfileName]=useState('')\n  const [fileType, setfileType]=useState('')\n  const [uploadPC, setuploadPC]=useState()\n  const [backendUrl, setbackendUrl]=useState('http://localhost:4000')\n\n  \n  // constructor(props) {\n  //   super(props)\n  //   this.state = {\n  //     fileSelected: null,\n  //     uploadId: '',\n  //     fileName: '',\n  //     backendUrl: 'http://localhost:4000',\n  //     uploadPC:0,\n  //   }\n  // }\n\n  useEffect(() => {\n    \n    console.log(\"inside useEffect: \", Fred);\n  }, [Fred]);\n\n  const fileHandler=async(e) =>{\n    // console.log(e)\n    try {\n      let fileSelected = document.getElementById('myfile').files[0]\n      let fileName = fileSelected.name\n      let fileType = fileSelected.type\n      setfileSelected(fileSelected)\n      setfileName(fileName)\n      setfileType(fileType)\n      console.log(fileSelected)\n    } catch (err) {\n      console.error(err, err.message) \n    }\n  }\n\n   const startUpload=async(e) =>{\n    try {\n      e.preventDefault()\n      \n      const params = {\n        fileName: fileName,\n        fileType: fileSelected.type\n      };\n      \n      let resp = await axios.get(`${backendUrl}/start-upload`, { params })\n      const { uploadId } = resp.data\n      console.log(uploadId)// this is all OK\n      setFred(uploadId)\n      console.log(Fred)//\"This displays the previous cycle: \",\n      uploadMultipartFile()\n    } catch (err) {\n      console.log(\"startupload \",err)\n    }\n  }\n\n   const uploadMultipartFile=async() =>{    \n    try {\n      console.log('Inside uploadMultipartFile', uploadId)\n      const fileSize = fileSelected.size\n      const CHUNK_SIZE = 5000000 // 5MB\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1\n      // const CHUNKS_COUNT =20\n      // const CHUNK_SIZE = fileSize/CHUNKS_COUNT // 5MB\n      let promisesArray = []\n      let start, end, blob\n      console.log(uploadId)\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE\n        end = (index) * CHUNK_SIZE\n        blob = (index < CHUNKS_COUNT) ? fileSelected.slice(start, end) : fileSelected.slice(start)\n\n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(`${backendUrl}/get-upload-url`, {\n          params: {\n            fileName: fileName,\n            partNumber: index,\n            uploadId: Fred,\n          }\n        })\n        \n        let { presignedUrl } = getUploadUrlResp.data\n        console.log(presignedUrl)\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + fileSelected.type)\n\n        // Send part aws server\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            'Content-Type': fileSelected.type\n          }\n        }).then(resp => {\n            setuploadPC:uploadPC+1  \n          console.log(parseInt(((uploadPC*CHUNK_SIZE)/fileSize)*100) + \"% uploaded\" )\n\n          return resp\n        })\n        \n        promisesArray.push(uploadResp)\n        \n      }\n\n      let resolvedArray = await Promise.all(promisesArray)\n      console.log(resolvedArray, ' resolvedAr')\n\n      let uploadPartsArray = []\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        })\n\n      })\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(`${backendUrl}/complete-upload`, {\n        params: {\n          fileName: fileName,\n          parts: uploadPartsArray,\n          uploadId: Fred\n        }\n      })\n      setUploadPC:0\n      console.log(completeUploadResp.data, \"complete upload response\")\n\n\n    } catch (err) {\n      console.log(err)\n    }\n  };\n\n    return (\n      <div>\n        <form onSubmit={startUpload}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input type='file' id='myfile' onChange={fileHandler} />\n            <button type='submit'>\n              Upload\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}