{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index-failed-as-a-function.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { Component, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nvar Index = function Index() {\n  _s();\n\n  var _useState = useState(null),\n      fileSelected = _useState[0],\n      setfileSelected = _useState[1];\n\n  var _useState2 = useState(''),\n      uploadId = _useState2[0],\n      setuploadId = _useState2[1];\n\n  var _useState3 = useState(''),\n      Fred = _useState3[0],\n      setFred = _useState3[1];\n\n  var _useState4 = useState(''),\n      fileName = _useState4[0],\n      setfileName = _useState4[1];\n\n  var _useState5 = useState(''),\n      fileType = _useState5[0],\n      setfileType = _useState5[1];\n\n  var _useState6 = useState(),\n      uploadPC = _useState6[0],\n      setuploadPC = _useState6[1];\n\n  var _useState7 = useState('http://localhost:4000'),\n      backendUrl = _useState7[0],\n      setbackendUrl = _useState7[1];\n\n  useEffect(function () {\n    if (Fred) // This means if Fred is not default empty state.\n      uploadMultipartFile();\n  }, [Fred]);\n\n  var fileHandler = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _fileSelected, _fileName, _fileType;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              try {\n                _fileSelected = document.getElementById('myfile').files[0];\n                _fileName = _fileSelected.name;\n                _fileType = _fileSelected.type;\n                setfileSelected(_fileSelected);\n                setfileName(_fileName);\n                setfileType(_fileType); // console.log(fileSelected)\n              } catch (err) {\n                console.error(err, err.message);\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fileHandler(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var startUpload = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      var params, resp, _uploadId;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              e.preventDefault();\n              params = {\n                fileName: fileName,\n                fileType: fileSelected.type\n              };\n              _context2.next = 5;\n              return axios.get(\"\".concat(backendUrl, \"/start-upload\"), {\n                params: params\n              });\n\n            case 5:\n              resp = _context2.sent;\n              _uploadId = resp.data.uploadId; // console.log(uploadId)// this is all OK\n\n              setFred(_uploadId);\n              console.log(Fred); //\"This displays the previous cycle: \",\n              // uploadMultipartFile()\n\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(\"startupload \", _context2.t0);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 11]]);\n    }));\n\n    return function startUpload(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var uploadMultipartFile = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var fileSize, CHUNK_SIZE, CHUNKS_COUNT, promisesArray, start, end, blob, index, getUploadUrlResp, presignedUrl, uploadResp, resolvedArray, uploadPartsArray, completeUploadResp;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              console.log(Fred);\n              fileSize = fileSelected.size;\n              CHUNK_SIZE = 5000000; // 5MB\n\n              CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n              promisesArray = [];\n              index = 1;\n\n            case 7:\n              if (!(index < CHUNKS_COUNT + 1)) {\n                _context3.next = 22;\n                break;\n              }\n\n              start = (index - 1) * CHUNK_SIZE;\n              end = index * CHUNK_SIZE;\n              blob = index < CHUNKS_COUNT ? fileSelected.slice(start, end) : fileSelected.slice(start); // Get presigned URL for each part\n\n              _context3.next = 13;\n              return axios.get(\"\".concat(backendUrl, \"/get-upload-url\"), {\n                params: {\n                  fileName: fileName,\n                  partNumber: index,\n                  uploadId: Fred\n                }\n              });\n\n            case 13:\n              getUploadUrlResp = _context3.sent;\n              console.log(getUploadUrlResp);\n              presignedUrl = getUploadUrlResp.data.presignedUrl; // console.log(presignedUrl)\n\n              console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + fileSelected.type); // Send part aws server\n\n              uploadResp = axios.put(presignedUrl, blob, {\n                headers: {\n                  'Content-Type': fileSelected.type\n                }\n              }).then(function (resp) {\n                setuploadPC: uploadPC + 1; // console.log(parseInt(((uploadPC*CHUNK_SIZE)/fileSize)*100) + \"% uploaded\" )\n\n\n                return resp;\n              });\n              promisesArray.push(uploadResp);\n\n            case 19:\n              index++;\n              _context3.next = 7;\n              break;\n\n            case 22:\n              _context3.next = 24;\n              return Promise.all(promisesArray);\n\n            case 24:\n              resolvedArray = _context3.sent;\n              console.log(resolvedArray, ' resolvedAr');\n              uploadPartsArray = [];\n              resolvedArray.forEach(function (resolvedPromise, index) {\n                uploadPartsArray.push({\n                  ETag: resolvedPromise.headers.etag,\n                  PartNumber: index + 1\n                });\n              }); // CompleteMultipartUpload in the backend server\n\n              _context3.next = 30;\n              return axios.post(\"\".concat(backendUrl, \"/complete-upload\"), {\n                params: {\n                  fileName: fileName,\n                  parts: uploadPartsArray,\n                  uploadId: Fred\n                }\n              });\n\n            case 30:\n              completeUploadResp = _context3.sent;\n\n              setUploadPC: 0;\n\n              console.log(completeUploadResp.data, \"complete upload response\");\n              _context3.next = 38;\n              break;\n\n            case 35:\n              _context3.prev = 35;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.log(_context3.t0);\n\n            case 38:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 35]]);\n    }));\n\n    return function uploadMultipartFile() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, __jsx(\"form\", {\n    onSubmit: startUpload,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, \"Upload Dataset:\"), __jsx(\"input\", {\n    type: \"file\",\n    id: \"myfile\",\n    onChange: fileHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, \"Upload\"))));\n};\n\n_s(Index, \"rm2I1vlzjQ5sABKUz97fCh6HAFQ=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/index-failed-as-a-function.js"],"names":["React","Component","useState","useEffect","axios","Index","fileSelected","setfileSelected","uploadId","setuploadId","Fred","setFred","fileName","setfileName","fileType","setfileType","uploadPC","setuploadPC","backendUrl","setbackendUrl","uploadMultipartFile","fileHandler","e","document","getElementById","files","name","type","err","console","error","message","startUpload","preventDefault","params","get","resp","data","log","fileSize","size","CHUNK_SIZE","CHUNKS_COUNT","Math","floor","promisesArray","index","start","end","blob","slice","partNumber","getUploadUrlResp","presignedUrl","uploadResp","put","headers","then","push","Promise","all","resolvedArray","uploadPartsArray","forEach","resolvedPromise","ETag","etag","PartNumber","post","parts","completeUploadResp","setUploadPC"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst Index=() => {\n const [fileSelected, setfileSelected]=useState(null)\n  const [uploadId, setuploadId]=useState('')\n  const [Fred, setFred]=useState('')\n  const [fileName, setfileName]=useState('')\n  const [fileType, setfileType]=useState('')\n  const [uploadPC, setuploadPC]=useState()\n  const [backendUrl, setbackendUrl]=useState('http://localhost:4000')\n\n  useEffect(() => {\n    if (Fred) // This means if Fred is not default empty state.\n    uploadMultipartFile()\n  }, [Fred]);\n  \n  const fileHandler=async(e) =>{\n    try {\n      let fileSelected = document.getElementById('myfile').files[0]\n      let fileName = fileSelected.name\n      let fileType = fileSelected.type\n      setfileSelected(fileSelected)\n      setfileName(fileName)\n      setfileType(fileType)\n      // console.log(fileSelected)\n    } catch (err) {\n      console.error(err, err.message) \n    }\n  }\n\n   const startUpload=async(e) =>{\n    try {\n      e.preventDefault()\n      \n      const params = {\n        fileName: fileName,\n        fileType: fileSelected.type\n      };\n      \n      let resp = await axios.get(`${backendUrl}/start-upload`, { params })\n      const { uploadId } = resp.data\n      // console.log(uploadId)// this is all OK\n      setFred(uploadId)\n      console.log(Fred)//\"This displays the previous cycle: \",\n      // uploadMultipartFile()\n    } catch (err) {\n      console.log(\"startupload \",err)\n    }\n  }\n\n   const uploadMultipartFile=async() =>{    \n    try {\n      console.log(Fred)\n      const fileSize = fileSelected.size\n      const CHUNK_SIZE = 5000000 // 5MB\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1\n      let promisesArray = []\n      let start, end, blob\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE\n        end = (index) * CHUNK_SIZE\n        blob = (index < CHUNKS_COUNT) ? fileSelected.slice(start, end) : fileSelected.slice(start)\n\n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(`${backendUrl}/get-upload-url`, {\n          params: {\n            fileName: fileName,\n            partNumber: index,\n            uploadId: Fred,\n          }\n        })\n        console.log (getUploadUrlResp)\n        let { presignedUrl } = getUploadUrlResp.data\n        // console.log(presignedUrl)\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + fileSelected.type)\n\n        // Send part aws server\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            'Content-Type': fileSelected.type\n          }\n        }).then(resp => {\n            setuploadPC:uploadPC+1  \n          // console.log(parseInt(((uploadPC*CHUNK_SIZE)/fileSize)*100) + \"% uploaded\" )\n\n          return resp\n        })\n        \n        promisesArray.push(uploadResp)\n        \n      }\n\n      let resolvedArray = await Promise.all(promisesArray)\n      console.log(resolvedArray, ' resolvedAr')\n\n      let uploadPartsArray = []\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        })\n\n      })\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(`${backendUrl}/complete-upload`, {\n        params: {\n          fileName: fileName,\n          parts: uploadPartsArray,\n          uploadId: Fred\n        }\n      })\n      setUploadPC:0\n      console.log(completeUploadResp.data, \"complete upload response\")\n\n\n    } catch (err) {\n      console.log(err)\n    }\n  };\n\n    return (\n      <div>\n        <form onSubmit={startUpload}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input type='file' id='myfile' onChange={fileHandler} />\n            <button type='submit'>\n              Upload\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}