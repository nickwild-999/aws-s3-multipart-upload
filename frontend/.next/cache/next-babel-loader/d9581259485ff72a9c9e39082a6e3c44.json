{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/indexold.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nvar Index = /*#__PURE__*/function (_Component) {\n  _inherits(Index, _Component);\n\n  var _super = _createSuper(Index);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      fileSelected: null,\n      uploadId: '',\n      fileName: '',\n      backendUrl: 'http://localhost:4000',\n      uploadPC: 0,\n      progressArray: [],\n      uploadProgress: 0\n    };\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"fileHandler\",\n    value: function () {\n      var _fileHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var fileSelected, fileName;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                try {\n                  fileSelected = event.target.files[0];\n                  fileName = fileSelected.name;\n                  this.setState({\n                    fileSelected: fileSelected\n                  });\n                  this.setState({\n                    fileName: fileName\n                  });\n                } catch (err) {\n                  console.error(err, err.message);\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fileHandler(_x) {\n        return _fileHandler.apply(this, arguments);\n      }\n\n      return fileHandler;\n    }()\n  }, {\n    key: \"startUpload\",\n    value: function () {\n      var _startUpload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n        var params, resp, uploadId;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                event.preventDefault();\n                params = {\n                  fileName: this.state.fileName,\n                  fileType: this.state.fileSelected.type\n                }; // console.log(\"fs\", this.state.fileSelected)\n                // console.log(\"params:\",params)\n\n                console.log(this.state.progressArray);\n                _context2.next = 6;\n                return axios.get(\"\".concat(this.state.backendUrl, \"/start-upload\"), {\n                  params: params\n                });\n\n              case 6:\n                resp = _context2.sent;\n                uploadId = resp.data.uploadId;\n                this.setState({\n                  uploadId: uploadId\n                });\n                this.uploadMultipartFile();\n                _context2.next = 15;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 12]]);\n      }));\n\n      function startUpload(_x2) {\n        return _startUpload.apply(this, arguments);\n      }\n\n      return startUpload;\n    }()\n  }, {\n    key: \"uploadMultipartFile\",\n    value: function () {\n      var _uploadMultipartFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                return _context6.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                  var fileSize, CHUNK_SIZE, CHUNKS_COUNT, promisesArray, start, end, blob, _loop, index, resolvedArray, uploadPartsArray, completeUploadResp;\n\n                  return _regeneratorRuntime.wrap(function _callee4$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          // console.log('Inside uploadMultipartFile')\n                          fileSize = _this2.state.fileSelected.size;\n                          CHUNK_SIZE = 5000000; // 5MB\n\n                          CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1; // const CHUNKS_COUNT =20\n                          // const CHUNK_SIZE = fileSize/CHUNKS_COUNT // 5MB\n\n                          promisesArray = [];\n                          _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(index) {\n                            var getUploadUrlResp, uploadProgressHandler, presignedUrl, uploadResp;\n                            return _regeneratorRuntime.wrap(function _loop$(_context4) {\n                              while (1) {\n                                switch (_context4.prev = _context4.next) {\n                                  case 0:\n                                    start = (index - 1) * CHUNK_SIZE;\n                                    end = index * CHUNK_SIZE;\n                                    blob = index < CHUNKS_COUNT ? _this2.state.fileSelected.slice(start, end) : _this2.state.fileSelected.slice(start); // Get presigned URL for each part\n\n                                    _context4.next = 5;\n                                    return axios.get(\"\".concat(_this2.state.backendUrl, \"/get-upload-url\"), {\n                                      params: {\n                                        fileName: _this2.state.fileName,\n                                        partNumber: index,\n                                        uploadId: _this2.state.uploadId\n                                      }\n                                    });\n\n                                  case 5:\n                                    getUploadUrlResp = _context4.sent;\n\n                                    //new\n                                    uploadProgressHandler = /*#__PURE__*/function () {\n                                      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(progressEvent, blob, index) {\n                                        var currentProgress, sum;\n                                        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                                          while (1) {\n                                            switch (_context3.prev = _context3.next) {\n                                              case 0:\n                                                if (!(progressEvent.loaded >= progressEvent.total)) {\n                                                  _context3.next = 2;\n                                                  break;\n                                                }\n\n                                                return _context3.abrupt(\"return\");\n\n                                              case 2:\n                                                currentProgress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n\n                                                _this2.setState(function (progressArray) {\n                                                  _this2.state.progressArray[index - 1] = currentProgress;\n                                                });\n\n                                                sum = _this2.state.progressArray.reduce(function (acc, curr) {\n                                                  return acc + curr;\n                                                });\n\n                                                _this2.setState({\n                                                  uploadProgress: Math.round(sum / CHUNKS_COUNT)\n                                                });\n\n                                                console.log(_this2.state.progressArray);\n                                                console.log(_this2.state.uploadProgress);\n                                                return _context3.abrupt(\"return\", uploadProgress);\n\n                                              case 9:\n                                              case \"end\":\n                                                return _context3.stop();\n                                            }\n                                          }\n                                        }, _callee3);\n                                      }));\n\n                                      return function uploadProgressHandler(_x3, _x4, _x5) {\n                                        return _ref.apply(this, arguments);\n                                      };\n                                    }();\n\n                                    presignedUrl = getUploadUrlResp.data.presignedUrl;\n                                    console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + _this2.state.fileSelected.type); // Send part aws server\n\n                                    uploadResp = axios.put(presignedUrl, blob, {\n                                      //new\n                                      onUploadProgress: function onUploadProgress(e) {\n                                        return uploadProgressHandler(e, CHUNKS_COUNT, index);\n                                      },\n                                      headers: {\n                                        'Content-Type': _this2.state.fileSelected.type\n                                      }\n                                    }).then(function (resp) {\n                                      _this2.setState({\n                                        uploadPC: _this2.state.uploadPC + 1\n                                      });\n\n                                      console.log(parseInt(_this2.state.uploadPC * CHUNK_SIZE / fileSize * 100) + \"% uploaded\");\n                                      return resp;\n                                    });\n                                    promisesArray.push(uploadResp);\n\n                                  case 11:\n                                  case \"end\":\n                                    return _context4.stop();\n                                }\n                              }\n                            }, _loop);\n                          });\n                          index = 1;\n\n                        case 6:\n                          if (!(index < CHUNKS_COUNT + 1)) {\n                            _context5.next = 11;\n                            break;\n                          }\n\n                          return _context5.delegateYield(_loop(index), \"t0\", 8);\n\n                        case 8:\n                          index++;\n                          _context5.next = 6;\n                          break;\n\n                        case 11:\n                          _context5.next = 13;\n                          return Promise.all(promisesArray);\n\n                        case 13:\n                          resolvedArray = _context5.sent;\n                          console.log(resolvedArray, ' resolvedAr');\n                          uploadPartsArray = [];\n                          resolvedArray.forEach(function (resolvedPromise, index) {\n                            uploadPartsArray.push({\n                              ETag: resolvedPromise.headers.etag,\n                              PartNumber: index + 1\n                            });\n                          }); // CompleteMultipartUpload in the backend server\n\n                          _context5.next = 19;\n                          return axios.post(\"\".concat(_this2.state.backendUrl, \"/complete-upload\"), {\n                            params: {\n                              fileName: _this2.state.fileName,\n                              parts: uploadPartsArray,\n                              uploadId: _this2.state.uploadId\n                            }\n                          });\n\n                        case 19:\n                          completeUploadResp = _context5.sent;\n                          console.log(completeUploadResp.data, \"complete upload response\");\n\n                        case 21:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee4);\n                })(), \"t0\", 2);\n\n              case 2:\n                _context6.next = 7;\n                break;\n\n              case 4:\n                _context6.prev = 4;\n                _context6.t1 = _context6[\"catch\"](0);\n                console.log(_context6.t1);\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee5, null, [[0, 4]]);\n      }));\n\n      function uploadMultipartFile() {\n        return _uploadMultipartFile.apply(this, arguments);\n      }\n\n      return uploadMultipartFile;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 7\n        }\n      }, __jsx(\"form\", {\n        onSubmit: this.startUpload.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }\n      }, \"Upload Dataset:\"), __jsx(\"input\", {\n        type: \"file\",\n        id: \"file\",\n        onChange: this.fileHandler.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }\n      }), __jsx(\"button\", {\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      }, \"Upload\"), uploadProgress, \"%\")));\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nexport { Index as default };","map":{"version":3,"sources":["/Users/nickwild/Programming/2. Nicci Topping/serverless/aws-s3-multipart-upload2/frontend/pages/indexold.js"],"names":["React","Component","axios","Index","props","state","fileSelected","uploadId","fileName","backendUrl","uploadPC","progressArray","uploadProgress","event","target","files","name","setState","err","console","error","message","preventDefault","params","fileType","type","log","get","resp","data","uploadMultipartFile","fileSize","size","CHUNK_SIZE","CHUNKS_COUNT","Math","floor","promisesArray","index","start","end","blob","slice","partNumber","getUploadUrlResp","uploadProgressHandler","progressEvent","loaded","total","currentProgress","round","sum","reduce","acc","curr","presignedUrl","uploadResp","put","onUploadProgress","e","headers","then","parseInt","push","Promise","all","resolvedArray","uploadPartsArray","forEach","resolvedPromise","ETag","etag","PartNumber","post","parts","completeUploadResp","startUpload","bind","fileHandler"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\n\nexport default class Index extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      fileSelected: null,\n      uploadId: '',\n      fileName: '',\n      backendUrl: 'http://localhost:4000',\n      uploadPC:0,\n      progressArray:[],\n      uploadProgress:0\n    }\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0]\n      let fileName = fileSelected.name\n      this.setState({ fileSelected })\n      this.setState({ fileName })\n    } catch (err) {\n      console.error(err, err.message) \n    }\n  }\n  \n  async startUpload(event) {\n    try {\n      event.preventDefault()\n      const params = {\n        fileName: this.state.fileName,\n        fileType: this.state.fileSelected.type\n      };\n      // console.log(\"fs\", this.state.fileSelected)\n      // console.log(\"params:\",params)\n      console.log(this.state.progressArray)\n\n      let resp = await axios.get(`${this.state.backendUrl}/start-upload`, { params })\n      let { uploadId } = resp.data\n      this.setState({ uploadId })\n      this.uploadMultipartFile()\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      // console.log('Inside uploadMultipartFile')\n      const fileSize = this.state.fileSelected.size\n      const CHUNK_SIZE = 5000000 // 5MB\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1\n      // const CHUNKS_COUNT =20\n      // const CHUNK_SIZE = fileSize/CHUNKS_COUNT // 5MB\n      \n      \n     \n      let promisesArray = []\n      let start, end, blob\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE\n        end = (index) * CHUNK_SIZE\n        blob = (index < CHUNKS_COUNT) ? this.state.fileSelected.slice(start, end) : this.state.fileSelected.slice(start)\n\n \n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(`${this.state.backendUrl}/get-upload-url`, {\n          params: {\n            fileName: this.state.fileName,\n            partNumber: index,\n            uploadId: this.state.uploadId\n          }\n        })\n\n    //new\n    const uploadProgressHandler=async(progressEvent, blob, index) =>{\n      if (progressEvent.loaded >= progressEvent.total) return;\n      const currentProgress = Math.round((progressEvent.loaded * 100) / progressEvent.total);  \n      this.setState(progressArray =>{this.state.progressArray[index-1] = currentProgress});\n        const sum = this.state.progressArray.reduce((acc, curr) => acc + curr);\n        this.setState({uploadProgress:Math.round(sum / CHUNKS_COUNT)});\n        console.log(this.state.progressArray)\n        console.log(this.state.uploadProgress)\n        \n        return uploadProgress\n    }\n\n      \n      \n\n\n        let { presignedUrl } = getUploadUrlResp.data\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + this.state.fileSelected.type)\n\n        // Send part aws server\n        let uploadResp = axios.put(presignedUrl, blob, {\n          //new\n          onUploadProgress: (e) => uploadProgressHandler(e, CHUNKS_COUNT, index),\n          headers: {\n            'Content-Type': this.state.fileSelected.type\n          }\n        }).then(resp => {\n          this.setState({ \n            uploadPC:this.state.uploadPC+1  \n          })\n          console.log(parseInt(((this.state.uploadPC*CHUNK_SIZE)/fileSize)*100) + \"% uploaded\" )\n\n          return resp\n        })\n        \n        promisesArray.push(uploadResp)\n        \n      }\n\n      let resolvedArray = await Promise.all(promisesArray)\n      console.log(resolvedArray, ' resolvedAr')\n\n      let uploadPartsArray = []\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        })\n\n      })\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(`${this.state.backendUrl}/complete-upload`, {\n        params: {\n          fileName: this.state.fileName,\n          parts: uploadPartsArray,\n          uploadId: this.state.uploadId\n        }\n      })\n   \n      console.log(completeUploadResp.data, \"complete upload response\")\n\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.startUpload.bind(this)}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input type='file' id='file' onChange={this.fileHandler.bind(this)} />\n            <button type='submit'>\n              Upload\n            </button>\n            {uploadProgress}%\n          </div>\n        </form>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}